// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class CWallets {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CWallets(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CWallets.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// alloc ** [parameters::CContext]
  ffi.Pointer<ffi.Pointer<CContext>> CContext_dAlloc() {
    return _CContext_dAlloc();
  }

  late final _CContext_dAllocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<CContext>> Function()>>(
      'CContext_dAlloc');
  late final _CContext_dAlloc = _CContext_dAllocPtr.asFunction<
      ffi.Pointer<ffi.Pointer<CContext>> Function()>();

  /// free ** [parameters::CContext]
  void CContext_dFree(
    ffi.Pointer<ffi.Pointer<CContext>> dPtr,
  ) {
    return _CContext_dFree(
      dPtr,
    );
  }

  late final _CContext_dFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<CContext>>)>>('CContext_dFree');
  late final _CContext_dFree = _CContext_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CContext>>)>();

  /// alloc ** [CArray]
  ffi.Pointer<ffi.Pointer<CArrayCContext>> CArrayCContext_dAlloc() {
    return _CArrayCContext_dAlloc();
  }

  late final _CArrayCContext_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCContext>>
              Function()>>('CArrayCContext_dAlloc');
  late final _CArrayCContext_dAlloc = _CArrayCContext_dAllocPtr.asFunction<
      ffi.Pointer<ffi.Pointer<CArrayCContext>> Function()>();

  void CArrayCContext_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCContext>> dPtr,
  ) {
    return _CArrayCContext_dFree(
      dPtr,
    );
  }

  late final _CArrayCContext_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<CArrayCContext>>)>>(
      'CArrayCContext_dFree');
  late final _CArrayCContext_dFree = _CArrayCContext_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CArrayCContext>>)>();

  void CStr_free(
    ffi.Pointer<ffi.Char> dcs,
  ) {
    return _CStr_free(
      dcs,
    );
  }

  late final _CStr_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'CStr_free');
  late final _CStr_free =
      _CStr_freePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void CStr_dFree(
    ffi.Pointer<ffi.Pointer<ffi.Char>> dcs,
  ) {
    return _CStr_dFree(
      dcs,
    );
  }

  late final _CStr_dFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('CStr_dFree');
  late final _CStr_dFree = _CStr_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> CStr_dAlloc() {
    return _CStr_dAlloc();
  }

  late final _CStr_dAllocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'CStr_dAlloc');
  late final _CStr_dAlloc = _CStr_dAllocPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  void CBool_free(
    ffi.Pointer<CBool> dcs,
  ) {
    return _CBool_free(
      dcs,
    );
  }

  late final _CBool_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CBool>)>>(
          'CBool_free');
  late final _CBool_free =
      _CBool_freePtr.asFunction<void Function(ffi.Pointer<CBool>)>();

  ffi.Pointer<CBool> CBool_alloc() {
    return _CBool_alloc();
  }

  late final _CBool_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CBool> Function()>>('CBool_alloc');
  late final _CBool_alloc =
      _CBool_allocPtr.asFunction<ffi.Pointer<CBool> Function()>();

  void CError_free(
    ffi.Pointer<CError> error,
  ) {
    return _CError_free(
      error,
    );
  }

  late final _CError_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CError>)>>(
          'CError_free');
  late final _CError_free =
      _CError_freePtr.asFunction<void Function(ffi.Pointer<CError>)>();

  ffi.Pointer<ffi.Pointer<CWallet>> CWallet_dAlloc() {
    return _CWallet_dAlloc();
  }

  late final _CWallet_dAllocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<CWallet>> Function()>>(
          'CWallet_dAlloc');
  late final _CWallet_dAlloc = _CWallet_dAllocPtr.asFunction<
      ffi.Pointer<ffi.Pointer<CWallet>> Function()>();

  void CWallet_dFree(
    ffi.Pointer<ffi.Pointer<CWallet>> dPtr,
  ) {
    return _CWallet_dFree(
      dPtr,
    );
  }

  late final _CWallet_dFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<CWallet>>)>>('CWallet_dFree');
  late final _CWallet_dFree = _CWallet_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CWallet>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCWallet>> CArrayCWallet_dAlloc() {
    return _CArrayCWallet_dAlloc();
  }

  late final _CArrayCWallet_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCWallet>>
              Function()>>('CArrayCWallet_dAlloc');
  late final _CArrayCWallet_dAlloc = _CArrayCWallet_dAllocPtr.asFunction<
      ffi.Pointer<ffi.Pointer<CArrayCWallet>> Function()>();

  void CArrayCWallet_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCWallet>> dPtr,
  ) {
    return _CArrayCWallet_dFree(
      dPtr,
    );
  }

  late final _CArrayCWallet_dFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<CArrayCWallet>>)>>('CArrayCWallet_dFree');
  late final _CArrayCWallet_dFree = _CArrayCWallet_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CArrayCWallet>>)>();

  ffi.Pointer<ffi.Pointer<CDbName>> CDbName_dAlloc() {
    return _CDbName_dAlloc();
  }

  late final _CDbName_dAllocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<CDbName>> Function()>>(
          'CDbName_dAlloc');
  late final _CDbName_dAlloc = _CDbName_dAllocPtr.asFunction<
      ffi.Pointer<ffi.Pointer<CDbName>> Function()>();

  void CDbName_dFree(
    ffi.Pointer<ffi.Pointer<CDbName>> dPtr,
  ) {
    return _CDbName_dFree(
      dPtr,
    );
  }

  late final _CDbName_dFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<CDbName>>)>>('CDbName_dFree');
  late final _CDbName_dFree = _CDbName_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CDbName>>)>();

  ffi.Pointer<ffi.Pointer<CArrayI64>> CArrayInt64_dAlloc() {
    return _CArrayInt64_dAlloc();
  }

  late final _CArrayInt64_dAllocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<CArrayI64>> Function()>>(
      'CArrayInt64_dAlloc');
  late final _CArrayInt64_dAlloc = _CArrayInt64_dAllocPtr.asFunction<
      ffi.Pointer<ffi.Pointer<CArrayI64>> Function()>();

  void CArrayInt64_dFree(
    ffi.Pointer<ffi.Pointer<CArrayI64>> dPtr,
  ) {
    return _CArrayInt64_dFree(
      dPtr,
    );
  }

  late final _CArrayInt64_dFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<CArrayI64>>)>>('CArrayInt64_dFree');
  late final _CArrayInt64_dFree = _CArrayInt64_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CArrayI64>>)>();

  ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> CAccountInfoSyncProg_dAlloc() {
    return _CAccountInfoSyncProg_dAlloc();
  }

  late final _CAccountInfoSyncProg_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>>
              Function()>>('CAccountInfoSyncProg_dAlloc');
  late final _CAccountInfoSyncProg_dAlloc = _CAccountInfoSyncProg_dAllocPtr
      .asFunction<ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> Function()>();

  void CAccountInfoSyncProg_dFree(
    ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> dPtr,
  ) {
    return _CAccountInfoSyncProg_dFree(
      dPtr,
    );
  }

  late final _CAccountInfoSyncProg_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>>)>>(
      'CAccountInfoSyncProg_dFree');
  late final _CAccountInfoSyncProg_dFree =
      _CAccountInfoSyncProg_dFreePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>>)>();

  ffi.Pointer<ffi.Pointer<CAccountInfo>> CAccountInfo_dAlloc() {
    return _CAccountInfo_dAlloc();
  }

  late final _CAccountInfo_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CAccountInfo>>
              Function()>>('CAccountInfo_dAlloc');
  late final _CAccountInfo_dAlloc = _CAccountInfo_dAllocPtr.asFunction<
      ffi.Pointer<ffi.Pointer<CAccountInfo>> Function()>();

  void CAccountInfo_dFree(
    ffi.Pointer<ffi.Pointer<CAccountInfo>> dPtr,
  ) {
    return _CAccountInfo_dFree(
      dPtr,
    );
  }

  late final _CAccountInfo_dFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<CAccountInfo>>)>>('CAccountInfo_dFree');
  late final _CAccountInfo_dFree = _CAccountInfo_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CAccountInfo>>)>();

  ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> CSubChainBasicInfo_dAlloc() {
    return _CSubChainBasicInfo_dAlloc();
  }

  late final _CSubChainBasicInfo_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>>
              Function()>>('CSubChainBasicInfo_dAlloc');
  late final _CSubChainBasicInfo_dAlloc = _CSubChainBasicInfo_dAllocPtr
      .asFunction<ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> Function()>();

  void CSubChainBasicInfo_dFree(
    ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> dPtr,
  ) {
    return _CSubChainBasicInfo_dFree(
      dPtr,
    );
  }

  late final _CSubChainBasicInfo_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>>)>>(
      'CSubChainBasicInfo_dFree');
  late final _CSubChainBasicInfo_dFree =
      _CSubChainBasicInfo_dFreePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCChar>> CArrayCChar_dAlloc() {
    return _CArrayCChar_dAlloc();
  }

  late final _CArrayCChar_dAllocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<CArrayCChar>> Function()>>(
      'CArrayCChar_dAlloc');
  late final _CArrayCChar_dAlloc = _CArrayCChar_dAllocPtr.asFunction<
      ffi.Pointer<ffi.Pointer<CArrayCChar>> Function()>();

  void CArrayCChar_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCChar>> dPtr,
  ) {
    return _CArrayCChar_dFree(
      dPtr,
    );
  }

  late final _CArrayCChar_dFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<CArrayCChar>>)>>('CArrayCChar_dFree');
  late final _CArrayCChar_dFree = _CArrayCChar_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CArrayCChar>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>> CExtrinsicContext_dAlloc() {
    return _CExtrinsicContext_dAlloc();
  }

  late final _CExtrinsicContext_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>>
              Function()>>('CExtrinsicContext_dAlloc');
  late final _CExtrinsicContext_dAlloc =
      _CExtrinsicContext_dAllocPtr.asFunction<
          ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>> Function()>();

  void CExtrinsicContext_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>> dPtr,
  ) {
    return _CExtrinsicContext_dFree(
      dPtr,
    );
  }

  late final _CExtrinsicContext_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>>)>>(
      'CExtrinsicContext_dFree');
  late final _CExtrinsicContext_dFree = _CExtrinsicContext_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> CArrayCTokenAddress_dAlloc() {
    return _CArrayCTokenAddress_dAlloc();
  }

  late final _CArrayCTokenAddress_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>>
              Function()>>('CArrayCTokenAddress_dAlloc');
  late final _CArrayCTokenAddress_dAlloc = _CArrayCTokenAddress_dAllocPtr
      .asFunction<ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> Function()>();

  void CArrayCTokenAddress_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> dPtr,
  ) {
    return _CArrayCTokenAddress_dFree(
      dPtr,
    );
  }

  late final _CArrayCTokenAddress_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>>)>>(
      'CArrayCTokenAddress_dFree');
  late final _CArrayCTokenAddress_dFree =
      _CArrayCTokenAddress_dFreePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>>
      CArrayCEthChainTokenAuth_dAlloc() {
    return _CArrayCEthChainTokenAuth_dAlloc();
  }

  late final _CArrayCEthChainTokenAuth_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>>
              Function()>>('CArrayCEthChainTokenAuth_dAlloc');
  late final _CArrayCEthChainTokenAuth_dAlloc =
      _CArrayCEthChainTokenAuth_dAllocPtr.asFunction<
          ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> Function()>();

  void CArrayCEthChainTokenAuth_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> dPtr,
  ) {
    return _CArrayCEthChainTokenAuth_dFree(
      dPtr,
    );
  }

  late final _CArrayCEthChainTokenAuth_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>>)>>(
      'CArrayCEthChainTokenAuth_dFree');
  late final _CArrayCEthChainTokenAuth_dFree =
      _CArrayCEthChainTokenAuth_dFreePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>>
      CArrayCEthChainTokenNonAuth_dAlloc() {
    return _CArrayCEthChainTokenNonAuth_dAlloc();
  }

  late final _CArrayCEthChainTokenNonAuth_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>>
              Function()>>('CArrayCEthChainTokenNonAuth_dAlloc');
  late final _CArrayCEthChainTokenNonAuth_dAlloc =
      _CArrayCEthChainTokenNonAuth_dAllocPtr.asFunction<
          ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>> Function()>();

  void CArrayCEthChainTokenNonAuth_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>> dPtr,
  ) {
    return _CArrayCEthChainTokenNonAuth_dFree(
      dPtr,
    );
  }

  late final _CArrayCEthChainTokenNonAuth_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>>)>>(
      'CArrayCEthChainTokenNonAuth_dFree');
  late final _CArrayCEthChainTokenNonAuth_dFree =
      _CArrayCEthChainTokenNonAuth_dFreePtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>>
      CArrayCEthChainTokenDefault_dAlloc() {
    return _CArrayCEthChainTokenDefault_dAlloc();
  }

  late final _CArrayCEthChainTokenDefault_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>>
              Function()>>('CArrayCEthChainTokenDefault_dAlloc');
  late final _CArrayCEthChainTokenDefault_dAlloc =
      _CArrayCEthChainTokenDefault_dAllocPtr.asFunction<
          ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>> Function()>();

  void CArrayCEthChainTokenDefault_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>> dPtr,
  ) {
    return _CArrayCEthChainTokenDefault_dFree(
      dPtr,
    );
  }

  late final _CArrayCEthChainTokenDefault_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>>)>>(
      'CArrayCEthChainTokenDefault_dFree');
  late final _CArrayCEthChainTokenDefault_dFree =
      _CArrayCEthChainTokenDefault_dFreePtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>>
      CArrayCEeeChainTokenDefault_dAlloc() {
    return _CArrayCEeeChainTokenDefault_dAlloc();
  }

  late final _CArrayCEeeChainTokenDefault_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>>
              Function()>>('CArrayCEeeChainTokenDefault_dAlloc');
  late final _CArrayCEeeChainTokenDefault_dAlloc =
      _CArrayCEeeChainTokenDefault_dAllocPtr.asFunction<
          ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>> Function()>();

  void CArrayCEeeChainTokenDefault_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>> dPtr,
  ) {
    return _CArrayCEeeChainTokenDefault_dFree(
      dPtr,
    );
  }

  late final _CArrayCEeeChainTokenDefault_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>>)>>(
      'CArrayCEeeChainTokenDefault_dFree');
  late final _CArrayCEeeChainTokenDefault_dFree =
      _CArrayCEeeChainTokenDefault_dFreePtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>>
      CArrayCBtcChainTokenDefault_dAlloc() {
    return _CArrayCBtcChainTokenDefault_dAlloc();
  }

  late final _CArrayCBtcChainTokenDefault_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>>
              Function()>>('CArrayCBtcChainTokenDefault_dAlloc');
  late final _CArrayCBtcChainTokenDefault_dAlloc =
      _CArrayCBtcChainTokenDefault_dAllocPtr.asFunction<
          ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>> Function()>();

  void CArrayCBtcChainTokenDefault_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>> dPtr,
  ) {
    return _CArrayCBtcChainTokenDefault_dFree(
      dPtr,
    );
  }

  late final _CArrayCBtcChainTokenDefault_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>>)>>(
      'CArrayCBtcChainTokenDefault_dFree');
  late final _CArrayCBtcChainTokenDefault_dFree =
      _CArrayCBtcChainTokenDefault_dFreePtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>>
      CArrayCEeeChainTokenAuth_dAlloc() {
    return _CArrayCEeeChainTokenAuth_dAlloc();
  }

  late final _CArrayCEeeChainTokenAuth_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>>
              Function()>>('CArrayCEeeChainTokenAuth_dAlloc');
  late final _CArrayCEeeChainTokenAuth_dAlloc =
      _CArrayCEeeChainTokenAuth_dAllocPtr.asFunction<
          ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>> Function()>();

  void CArrayCEeeChainTokenAuth_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>> dPtr,
  ) {
    return _CArrayCEeeChainTokenAuth_dFree(
      dPtr,
    );
  }

  late final _CArrayCEeeChainTokenAuth_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>>)>>(
      'CArrayCEeeChainTokenAuth_dFree');
  late final _CArrayCEeeChainTokenAuth_dFree =
      _CArrayCEeeChainTokenAuth_dFreePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>>
      CArrayCBtcChainTokenAuth_dAlloc() {
    return _CArrayCBtcChainTokenAuth_dAlloc();
  }

  late final _CArrayCBtcChainTokenAuth_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>>
              Function()>>('CArrayCBtcChainTokenAuth_dAlloc');
  late final _CArrayCBtcChainTokenAuth_dAlloc =
      _CArrayCBtcChainTokenAuth_dAllocPtr.asFunction<
          ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>> Function()>();

  void CArrayCBtcChainTokenAuth_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>> dPtr,
  ) {
    return _CArrayCBtcChainTokenAuth_dFree(
      dPtr,
    );
  }

  late final _CArrayCBtcChainTokenAuth_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>>)>>(
      'CArrayCBtcChainTokenAuth_dFree');
  late final _CArrayCBtcChainTokenAuth_dFree =
      _CArrayCBtcChainTokenAuth_dFreePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>>)>();

  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> CArrayCEeeChainTx_dAlloc() {
    return _CArrayCEeeChainTx_dAlloc();
  }

  late final _CArrayCEeeChainTx_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>>
              Function()>>('CArrayCEeeChainTx_dAlloc');
  late final _CArrayCEeeChainTx_dAlloc = _CArrayCEeeChainTx_dAllocPtr
      .asFunction<ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> Function()>();

  void CArrayCEeeChainTx_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> dPtr,
  ) {
    return _CArrayCEeeChainTx_dFree(
      dPtr,
    );
  }

  late final _CArrayCEeeChainTx_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>>)>>(
      'CArrayCEeeChainTx_dFree');
  late final _CArrayCEeeChainTx_dFree = _CArrayCEeeChainTx_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>>)>();

  ffi.Pointer<ffi.Pointer<CWalletTokenStatus>> CWalletTokenStatus_dAlloc() {
    return _CWalletTokenStatus_dAlloc();
  }

  late final _CWalletTokenStatus_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CWalletTokenStatus>>
              Function()>>('CWalletTokenStatus_dAlloc');
  late final _CWalletTokenStatus_dAlloc = _CWalletTokenStatus_dAllocPtr
      .asFunction<ffi.Pointer<ffi.Pointer<CWalletTokenStatus>> Function()>();

  void CWalletTokenStatus_dFree(
    ffi.Pointer<ffi.Pointer<CWalletTokenStatus>> dPtr,
  ) {
    return _CWalletTokenStatus_dFree(
      dPtr,
    );
  }

  late final _CWalletTokenStatus_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<CWalletTokenStatus>>)>>(
      'CWalletTokenStatus_dFree');
  late final _CWalletTokenStatus_dFree =
      _CWalletTokenStatus_dFreePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<CWalletTokenStatus>>)>();

  ffi.Pointer<ffi.Pointer<CBtcNowLoadBlock>> CBtcNowLoadBlock_dAlloc() {
    return _CBtcNowLoadBlock_dAlloc();
  }

  late final _CBtcNowLoadBlock_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CBtcNowLoadBlock>>
              Function()>>('CBtcNowLoadBlock_dAlloc');
  late final _CBtcNowLoadBlock_dAlloc = _CBtcNowLoadBlock_dAllocPtr.asFunction<
      ffi.Pointer<ffi.Pointer<CBtcNowLoadBlock>> Function()>();

  void CBtcNowLoadBlock_dFree(
    ffi.Pointer<ffi.Pointer<CBtcNowLoadBlock>> dPtr,
  ) {
    return _CBtcNowLoadBlock_dFree(
      dPtr,
    );
  }

  late final _CBtcNowLoadBlock_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<CBtcNowLoadBlock>>)>>(
      'CBtcNowLoadBlock_dFree');
  late final _CBtcNowLoadBlock_dFree = _CBtcNowLoadBlock_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CBtcNowLoadBlock>>)>();

  ffi.Pointer<ffi.Pointer<CBtcBalance>> CBtcBalance_dAlloc() {
    return _CBtcBalance_dAlloc();
  }

  late final _CBtcBalance_dAllocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<CBtcBalance>> Function()>>(
      'CBtcBalance_dAlloc');
  late final _CBtcBalance_dAlloc = _CBtcBalance_dAllocPtr.asFunction<
      ffi.Pointer<ffi.Pointer<CBtcBalance>> Function()>();

  void CBtcBalance_dFree(
    ffi.Pointer<ffi.Pointer<CBtcBalance>> dPtr,
  ) {
    return _CBtcBalance_dFree(
      dPtr,
    );
  }

  late final _CBtcBalance_dFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<CBtcBalance>>)>>('CBtcBalance_dFree');
  late final _CBtcBalance_dFree = _CBtcBalance_dFreePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<CBtcBalance>>)>();

  ffi.Pointer<ffi.Pointer<CEthWalletConnectTx>> CEthWalletConnectTx_dAlloc() {
    return _CEthWalletConnectTx_dAlloc();
  }

  late final _CEthWalletConnectTx_dAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CEthWalletConnectTx>>
              Function()>>('CEthWalletConnectTx_dAlloc');
  late final _CEthWalletConnectTx_dAlloc = _CEthWalletConnectTx_dAllocPtr
      .asFunction<ffi.Pointer<ffi.Pointer<CEthWalletConnectTx>> Function()>();

  void CEthWalletConnectTx_dFree(
    ffi.Pointer<ffi.Pointer<CEthWalletConnectTx>> dPtr,
  ) {
    return _CEthWalletConnectTx_dFree(
      dPtr,
    );
  }

  late final _CEthWalletConnectTx_dFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<CEthWalletConnectTx>>)>>(
      'CEthWalletConnectTx_dFree');
  late final _CEthWalletConnectTx_dFree =
      _CEthWalletConnectTx_dFreePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<CEthWalletConnectTx>>)>();

  /// 生成数据库文件名，只有数据库文件名不存在（为null或“”）时才创建文件名
  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_dbName(
    ffi.Pointer<CDbName> name,
    ffi.Pointer<ffi.Pointer<CDbName>> outName,
  ) {
    return _Wallets_dbName(
      name,
      outName,
    );
  }

  late final _Wallets_dbNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CDbName>,
              ffi.Pointer<ffi.Pointer<CDbName>>)>>('Wallets_dbName');
  late final _Wallets_dbName = _Wallets_dbNamePtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CDbName>, ffi.Pointer<ffi.Pointer<CDbName>>)>();

  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_init(
    ffi.Pointer<CInitParameters> parameter,
    ffi.Pointer<ffi.Pointer<CContext>> context,
  ) {
    return _Wallets_init(
      parameter,
      context,
    );
  }

  late final _Wallets_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CInitParameters>,
              ffi.Pointer<ffi.Pointer<CContext>>)>>('Wallets_init');
  late final _Wallets_init = _Wallets_initPtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CInitParameters>, ffi.Pointer<ffi.Pointer<CContext>>)>();

  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_uninit(
    ffi.Pointer<CContext> ctx,
  ) {
    return _Wallets_uninit(
      ctx,
    );
  }

  late final _Wallets_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>)>>('Wallets_uninit');
  late final _Wallets_uninit = _Wallets_uninitPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>)>();

  /// 返回所有的Context, 有可能是0个
  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_Contexts(
    ffi.Pointer<ffi.Pointer<CArrayCContext>> contexts,
  ) {
    return _Wallets_Contexts(
      contexts,
    );
  }

  late final _Wallets_ContextsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<ffi.Pointer<CArrayCContext>>)>>('Wallets_Contexts');
  late final _Wallets_Contexts = _Wallets_ContextsPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<ffi.Pointer<CArrayCContext>>)>();

  /// 返回最后的Context, 有可能是空值
  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_lastContext(
    ffi.Pointer<ffi.Pointer<CContext>> context,
  ) {
    return _Wallets_lastContext(
      context,
    );
  }

  late final _Wallets_lastContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<ffi.Pointer<CContext>>)>>('Wallets_lastContext');
  late final _Wallets_lastContext = _Wallets_lastContextPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<ffi.Pointer<CContext>>)>();

  /// 返回第一个Context, 有可能是空值
  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_firstContext(
    ffi.Pointer<ffi.Pointer<CContext>> context,
  ) {
    return _Wallets_firstContext(
      context,
    );
  }

  late final _Wallets_firstContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<ffi.Pointer<CContext>>)>>('Wallets_firstContext');
  late final _Wallets_firstContext = _Wallets_firstContextPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<ffi.Pointer<CContext>>)>();

  ffi.Pointer<CError> Wallets_lockRead(
    ffi.Pointer<CContext> ctx,
  ) {
    return _Wallets_lockRead(
      ctx,
    );
  }

  late final _Wallets_lockReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>)>>('Wallets_lockRead');
  late final _Wallets_lockRead = _Wallets_lockReadPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>)>();

  ffi.Pointer<CError> Wallets_unlockRead(
    ffi.Pointer<CContext> ctx,
  ) {
    return _Wallets_unlockRead(
      ctx,
    );
  }

  late final _Wallets_unlockReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>)>>('Wallets_unlockRead');
  late final _Wallets_unlockRead = _Wallets_unlockReadPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>)>();

  ffi.Pointer<CError> Wallets_lockWrite(
    ffi.Pointer<CContext> ctx,
  ) {
    return _Wallets_lockWrite(
      ctx,
    );
  }

  late final _Wallets_lockWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>)>>('Wallets_lockWrite');
  late final _Wallets_lockWrite = _Wallets_lockWritePtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>)>();

  ffi.Pointer<CError> Wallets_unlockWrite(
    ffi.Pointer<CContext> ctx,
  ) {
    return _Wallets_unlockWrite(
      ctx,
    );
  }

  late final _Wallets_unlockWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>)>>('Wallets_unlockWrite');
  late final _Wallets_unlockWrite = _Wallets_unlockWritePtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>)>();

  ffi.Pointer<CError> Wallets_changeNetType(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> netType,
  ) {
    return _Wallets_changeNetType(
      ctx,
      netType,
    );
  }

  late final _Wallets_changeNetTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>)>>('Wallets_changeNetType');
  late final _Wallets_changeNetType = _Wallets_changeNetTypePtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CError> Wallets_getCurrentNetType(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Char>> netType,
  ) {
    return _Wallets_getCurrentNetType(
      ctx,
      netType,
    );
  }

  late final _Wallets_getCurrentNetTypePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'Wallets_getCurrentNetType');
  late final _Wallets_getCurrentNetType =
      _Wallets_getCurrentNetTypePtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> Wallets_all(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<CArrayCWallet>> arrayWallet,
  ) {
    return _Wallets_all(
      ctx,
      arrayWallet,
    );
  }

  late final _Wallets_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Pointer<CArrayCWallet>>)>>('Wallets_all');
  late final _Wallets_all = _Wallets_allPtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>, ffi.Pointer<ffi.Pointer<CArrayCWallet>>)>();

  ffi.Pointer<CError> Wallets_generateMnemonic(
    int mnemonic_num,
    ffi.Pointer<ffi.Pointer<ffi.Char>> mnemonic,
  ) {
    return _Wallets_generateMnemonic(
      mnemonic_num,
      mnemonic,
    );
  }

  late final _Wallets_generateMnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Wallets_generateMnemonic');
  late final _Wallets_generateMnemonic =
      _Wallets_generateMnemonicPtr.asFunction<
          ffi.Pointer<CError> Function(
              int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> Wallets_createWallet(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CCreateWalletParameters> parameters,
    ffi.Pointer<ffi.Pointer<CWallet>> wallet,
  ) {
    return _Wallets_createWallet(
      ctx,
      parameters,
      wallet,
    );
  }

  late final _Wallets_createWalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<CCreateWalletParameters>,
              ffi.Pointer<ffi.Pointer<CWallet>>)>>('Wallets_createWallet');
  late final _Wallets_createWallet = _Wallets_createWalletPtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>,
          ffi.Pointer<CCreateWalletParameters>,
          ffi.Pointer<ffi.Pointer<CWallet>>)>();

  ffi.Pointer<CError> Wallets_removeWallet(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> walletId,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _Wallets_removeWallet(
      ctx,
      walletId,
      password,
    );
  }

  late final _Wallets_removeWalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Wallets_removeWallet');
  late final _Wallets_removeWallet = _Wallets_removeWalletPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CError> Wallets_exportWallet(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> walletId,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Pointer<ffi.Char>> mnemonic,
  ) {
    return _Wallets_exportWallet(
      ctx,
      walletId,
      password,
      mnemonic,
    );
  }

  late final _Wallets_exportWalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Wallets_exportWallet');
  late final _Wallets_exportWallet = _Wallets_exportWalletPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> Wallets_resetWalletPassword(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> walletId,
    ffi.Pointer<ffi.Char> oldPsd,
    ffi.Pointer<ffi.Char> newPsd,
  ) {
    return _Wallets_resetWalletPassword(
      ctx,
      walletId,
      oldPsd,
      newPsd,
    );
  }

  late final _Wallets_resetWalletPasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Wallets_resetWalletPassword');
  late final _Wallets_resetWalletPassword =
      _Wallets_resetWalletPasswordPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CError> Wallets_renameWallet(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> newName,
    ffi.Pointer<ffi.Char> walletId,
  ) {
    return _Wallets_renameWallet(
      ctx,
      newName,
      walletId,
    );
  }

  late final _Wallets_renameWalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Wallets_renameWallet');
  late final _Wallets_renameWallet = _Wallets_renameWalletPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// 只有到CError为 Error::SUCCESS()时返值才有意义
  /// 返回值 hasAny: true表示至少有一个; Fail: false，没有
  ffi.Pointer<CError> Wallets_hasAny(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CBool> hasAny,
  ) {
    return _Wallets_hasAny(
      ctx,
      hasAny,
    );
  }

  late final _Wallets_hasAnyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>, ffi.Pointer<CBool>)>>('Wallets_hasAny');
  late final _Wallets_hasAny = _Wallets_hasAnyPtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>, ffi.Pointer<CBool>)>();

  ffi.Pointer<CError> Wallets_findById(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> walletId,
    ffi.Pointer<ffi.Pointer<CWallet>> wallet,
  ) {
    return _Wallets_findById(
      ctx,
      walletId,
      wallet,
    );
  }

  late final _Wallets_findByIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<CWallet>>)>>('Wallets_findById');
  late final _Wallets_findById = _Wallets_findByIdPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<CWallet>>)>();

  /// 注：只加载了wallet的id name等直接的基本数据，子对象（如链）的数据没有加载
  ffi.Pointer<CError> Wallets_findWalletBaseByName(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<CArrayCWallet>> walletArray,
  ) {
    return _Wallets_findWalletBaseByName(
      ctx,
      name,
      walletArray,
    );
  }

  late final _Wallets_findWalletBaseByNamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<CArrayCWallet>>)>>(
      'Wallets_findWalletBaseByName');
  late final _Wallets_findWalletBaseByName =
      _Wallets_findWalletBaseByNamePtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<CArrayCWallet>>)>();

  /// 查询当前wallet 与 chain
  ffi.Pointer<CError> Wallets_currentWalletChain(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Char>> walletId,
    ffi.Pointer<ffi.Pointer<ffi.Char>> chainType,
  ) {
    return _Wallets_currentWalletChain(
      ctx,
      walletId,
      chainType,
    );
  }

  late final _Wallets_currentWalletChainPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'Wallets_currentWalletChain');
  late final _Wallets_currentWalletChain =
      _Wallets_currentWalletChainPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// 保存当前wallet 与 chain
  ffi.Pointer<CError> Wallets_saveCurrentWalletChain(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> walletId,
    ffi.Pointer<ffi.Char> chainType,
  ) {
    return _Wallets_saveCurrentWalletChain(
      ctx,
      walletId,
      chainType,
    );
  }

  late final _Wallets_saveCurrentWalletChainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Wallets_saveCurrentWalletChain');
  late final _Wallets_saveCurrentWalletChain =
      _Wallets_saveCurrentWalletChainPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// 返回 AppPlatformType
  ffi.Pointer<ffi.Char> Wallets_appPlatformType() {
    return _Wallets_appPlatformType();
  }

  late final _Wallets_appPlatformTypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Wallets_appPlatformType');
  late final _Wallets_appPlatformType = _Wallets_appPlatformTypePtr.asFunction<
      ffi.Pointer<ffi.Char> Function()>();

  /// 返回 package version
  ffi.Pointer<ffi.Char> Wallets_packageVersion() {
    return _Wallets_packageVersion();
  }

  late final _Wallets_packageVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Wallets_packageVersion');
  late final _Wallets_packageVersion =
      _Wallets_packageVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<CError> Wallets_queryBalance(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> walletId,
    ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> tokenAddress,
  ) {
    return _Wallets_queryBalance(
      ctx,
      walletId,
      tokenAddress,
    );
  }

  late final _Wallets_queryBalancePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>>)>>(
      'Wallets_queryBalance');
  late final _Wallets_queryBalance = _Wallets_queryBalancePtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>>)>();

  ffi.Pointer<CError> Wallets_updateBalance(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CTokenAddress> tokenAddress,
  ) {
    return _Wallets_updateBalance(
      ctx,
      tokenAddress,
    );
  }

  late final _Wallets_updateBalancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<CTokenAddress>)>>('Wallets_updateBalance');
  late final _Wallets_updateBalance = _Wallets_updateBalancePtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>, ffi.Pointer<CTokenAddress>)>();

  ffi.Pointer<CError> Wallets_changeTokenShowState(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CWalletTokenStatus> tokenStatus,
  ) {
    return _Wallets_changeTokenShowState(
      ctx,
      tokenStatus,
    );
  }

  late final _Wallets_changeTokenShowStatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>, ffi.Pointer<CWalletTokenStatus>)>>(
      'Wallets_changeTokenShowState');
  late final _Wallets_changeTokenShowState =
      _Wallets_changeTokenShowStatePtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>, ffi.Pointer<CWalletTokenStatus>)>();

  ffi.Pointer<CError> ChainBtc_updateDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCBtcChainTokenDefault> defaultTokens,
  ) {
    return _ChainBtc_updateDefaultTokenList(
      ctx,
      defaultTokens,
    );
  }

  late final _ChainBtc_updateDefaultTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<CArrayCBtcChainTokenDefault>)>>(
      'ChainBtc_updateDefaultTokenList');
  late final _ChainBtc_updateDefaultTokenList =
      _ChainBtc_updateDefaultTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<CArrayCBtcChainTokenDefault>)>();

  ffi.Pointer<CError> ChainBtc_updateAuthDigitList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCBtcChainTokenAuth> authTokens,
  ) {
    return _ChainBtc_updateAuthDigitList(
      ctx,
      authTokens,
    );
  }

  late final _ChainBtc_updateAuthDigitListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<CArrayCBtcChainTokenAuth>)>>(
      'ChainBtc_updateAuthDigitList');
  late final _ChainBtc_updateAuthDigitList =
      _ChainBtc_updateAuthDigitListPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>, ffi.Pointer<CArrayCBtcChainTokenAuth>)>();

  ffi.Pointer<CError> ChainBtc_getAuthTokenList(
    ffi.Pointer<CContext> ctx,
    int startItem,
    int pageSize,
    ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>> tokens,
  ) {
    return _ChainBtc_getAuthTokenList(
      ctx,
      startItem,
      pageSize,
      tokens,
    );
  }

  late final _ChainBtc_getAuthTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>>)>>(
      'ChainBtc_getAuthTokenList');
  late final _ChainBtc_getAuthTokenList =
      _ChainBtc_getAuthTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>, int, int,
              ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>>)>();

  ffi.Pointer<CError> ChainBtc_getDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>> tokens,
  ) {
    return _ChainBtc_getDefaultTokenList(
      ctx,
      tokens,
    );
  }

  late final _ChainBtc_getDefaultTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>>)>>(
      'ChainBtc_getDefaultTokenList');
  late final _ChainBtc_getDefaultTokenList =
      _ChainBtc_getDefaultTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>>)>();

  ffi.Pointer<CError> ChainBtc_start(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> walletId,
  ) {
    return _ChainBtc_start(
      ctx,
      walletId,
    );
  }

  late final _ChainBtc_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>, ffi.Pointer<ffi.Char>)>>('ChainBtc_start');
  late final _ChainBtc_start = _ChainBtc_startPtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CError> ChainBtc_loadNowBlockNumber(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<CBtcNowLoadBlock>> block,
  ) {
    return _ChainBtc_loadNowBlockNumber(
      ctx,
      block,
    );
  }

  late final _ChainBtc_loadNowBlockNumberPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Pointer<CBtcNowLoadBlock>>)>>(
      'ChainBtc_loadNowBlockNumber');
  late final _ChainBtc_loadNowBlockNumber =
      _ChainBtc_loadNowBlockNumberPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Pointer<CBtcNowLoadBlock>>)>();

  ffi.Pointer<CError> ChainBtc_loadBalance(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<CBtcBalance>> balance,
  ) {
    return _ChainBtc_loadBalance(
      ctx,
      balance,
    );
  }

  late final _ChainBtc_loadBalancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Pointer<CBtcBalance>>)>>('ChainBtc_loadBalance');
  late final _ChainBtc_loadBalance = _ChainBtc_loadBalancePtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>, ffi.Pointer<ffi.Pointer<CBtcBalance>>)>();

  ffi.Pointer<CError> ChainBtc_txSign(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CBtcTxParam> param,
    ffi.Pointer<ffi.Pointer<ffi.Char>> signedResult,
  ) {
    return _ChainBtc_txSign(
      ctx,
      param,
      signedResult,
    );
  }

  late final _ChainBtc_txSignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<CBtcTxParam>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('ChainBtc_txSign');
  late final _ChainBtc_txSign = _ChainBtc_txSignPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
          ffi.Pointer<CBtcTxParam>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> ChainEee_updateSyncRecord(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CAccountInfoSyncProg> syncRecord,
  ) {
    return _ChainEee_updateSyncRecord(
      ctx,
      syncRecord,
    );
  }

  late final _ChainEee_updateSyncRecordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<CAccountInfoSyncProg>)>>('ChainEee_updateSyncRecord');
  late final _ChainEee_updateSyncRecord =
      _ChainEee_updateSyncRecordPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>, ffi.Pointer<CAccountInfoSyncProg>)>();

  ffi.Pointer<CError> ChainEee_getSyncRecord(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> account,
    ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> syncRecord,
  ) {
    return _ChainEee_getSyncRecord(
      ctx,
      account,
      syncRecord,
    );
  }

  late final _ChainEee_getSyncRecordPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>>)>>(
      'ChainEee_getSyncRecord');
  late final _ChainEee_getSyncRecord = _ChainEee_getSyncRecordPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>>)>();

  ffi.Pointer<CError> ChainEee_decodeAccountInfo(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CDecodeAccountInfoParameters> parameters,
    ffi.Pointer<ffi.Pointer<CAccountInfo>> accountInfo,
  ) {
    return _ChainEee_decodeAccountInfo(
      ctx,
      parameters,
      accountInfo,
    );
  }

  late final _ChainEee_decodeAccountInfoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.Pointer<CDecodeAccountInfoParameters>,
                  ffi.Pointer<ffi.Pointer<CAccountInfo>>)>>(
      'ChainEee_decodeAccountInfo');
  late final _ChainEee_decodeAccountInfo =
      _ChainEee_decodeAccountInfoPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<CDecodeAccountInfoParameters>,
              ffi.Pointer<ffi.Pointer<CAccountInfo>>)>();

  ffi.Pointer<CError> ChainEee_getStorageKey(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CStorageKeyParameters> parameters,
    ffi.Pointer<ffi.Pointer<ffi.Char>> key,
  ) {
    return _ChainEee_getStorageKey(
      ctx,
      parameters,
      key,
    );
  }

  late final _ChainEee_getStorageKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<CStorageKeyParameters>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('ChainEee_getStorageKey');
  late final _ChainEee_getStorageKey = _ChainEee_getStorageKeyPtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>,
          ffi.Pointer<CStorageKeyParameters>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> ChainEee_eeeTransfer(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CEeeTransferPayload> transferPayload,
    ffi.Pointer<ffi.Pointer<ffi.Char>> signedResult,
  ) {
    return _ChainEee_eeeTransfer(
      ctx,
      transferPayload,
      signedResult,
    );
  }

  late final _ChainEee_eeeTransferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<CEeeTransferPayload>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('ChainEee_eeeTransfer');
  late final _ChainEee_eeeTransfer = _ChainEee_eeeTransferPtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>,
          ffi.Pointer<CEeeTransferPayload>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> ChainEee_tokenXTransfer(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CEeeTransferPayload> transferPayload,
    ffi.Pointer<ffi.Pointer<ffi.Char>> signedResult,
  ) {
    return _ChainEee_tokenXTransfer(
      ctx,
      transferPayload,
      signedResult,
    );
  }

  late final _ChainEee_tokenXTransferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<CEeeTransferPayload>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('ChainEee_tokenXTransfer');
  late final _ChainEee_tokenXTransfer = _ChainEee_tokenXTransferPtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>,
          ffi.Pointer<CEeeTransferPayload>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> ChainEee_txSubmittableSign(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CRawTxParam> rawTx,
    ffi.Pointer<ffi.Pointer<ffi.Char>> signedResult,
  ) {
    return _ChainEee_txSubmittableSign(
      ctx,
      rawTx,
      signedResult,
    );
  }

  late final _ChainEee_txSubmittableSignPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.Pointer<CRawTxParam>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'ChainEee_txSubmittableSign');
  late final _ChainEee_txSubmittableSign =
      _ChainEee_txSubmittableSignPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<CRawTxParam>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> ChainEee_txSign(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CRawTxParam> rawTx,
    ffi.Pointer<ffi.Pointer<ffi.Char>> signedResult,
  ) {
    return _ChainEee_txSign(
      ctx,
      rawTx,
      signedResult,
    );
  }

  late final _ChainEee_txSignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<CRawTxParam>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('ChainEee_txSign');
  late final _ChainEee_txSign = _ChainEee_txSignPtr.asFunction<
      ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
          ffi.Pointer<CRawTxParam>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> ChainEee_updateBasicInfo(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CSubChainBasicInfo> basicInfo,
  ) {
    return _ChainEee_updateBasicInfo(
      ctx,
      basicInfo,
    );
  }

  late final _ChainEee_updateBasicInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<CSubChainBasicInfo>)>>('ChainEee_updateBasicInfo');
  late final _ChainEee_updateBasicInfo =
      _ChainEee_updateBasicInfoPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>, ffi.Pointer<CSubChainBasicInfo>)>();

  ffi.Pointer<CError> ChainEee_getDefaultBasicInfo(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> basicInfo,
  ) {
    return _ChainEee_getDefaultBasicInfo(
      ctx,
      basicInfo,
    );
  }

  late final _ChainEee_getDefaultBasicInfoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>>)>>(
      'ChainEee_getDefaultBasicInfo');
  late final _ChainEee_getDefaultBasicInfo =
      _ChainEee_getDefaultBasicInfoPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>>)>();

  ffi.Pointer<CError> ChainEee_getBasicInfo(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CChainVersion> chainVersion,
    ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> basicInfo,
  ) {
    return _ChainEee_getBasicInfo(
      ctx,
      chainVersion,
      basicInfo,
    );
  }

  late final _ChainEee_getBasicInfoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.Pointer<CChainVersion>,
                  ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>>)>>(
      'ChainEee_getBasicInfo');
  late final _ChainEee_getBasicInfo = _ChainEee_getBasicInfoPtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>,
          ffi.Pointer<CChainVersion>,
          ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>>)>();

  ffi.Pointer<CError> ChainEee_saveExtrinsicDetail(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CExtrinsicContext> extrinsicCtx,
  ) {
    return _ChainEee_saveExtrinsicDetail(
      ctx,
      extrinsicCtx,
    );
  }

  late final _ChainEee_saveExtrinsicDetailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<CExtrinsicContext>)>>('ChainEee_saveExtrinsicDetail');
  late final _ChainEee_saveExtrinsicDetail =
      _ChainEee_saveExtrinsicDetailPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>, ffi.Pointer<CExtrinsicContext>)>();

  ffi.Pointer<CError> ChainEee_queryChainTxRecord(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> account,
    int startItem,
    int pageSize,
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> records,
  ) {
    return _ChainEee_queryChainTxRecord(
      ctx,
      account,
      startItem,
      pageSize,
      records,
    );
  }

  late final _ChainEee_queryChainTxRecordPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Char>,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>>)>>(
      'ChainEee_queryChainTxRecord');
  late final _ChainEee_queryChainTxRecord =
      _ChainEee_queryChainTxRecordPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>>)>();

  ffi.Pointer<CError> ChainEee_queryTokenxTxRecord(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> account,
    int startItem,
    int pageSize,
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> records,
  ) {
    return _ChainEee_queryTokenxTxRecord(
      ctx,
      account,
      startItem,
      pageSize,
      records,
    );
  }

  late final _ChainEee_queryTokenxTxRecordPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Char>,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>>)>>(
      'ChainEee_queryTokenxTxRecord');
  late final _ChainEee_queryTokenxTxRecord =
      _ChainEee_queryTokenxTxRecordPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>>)>();

  ffi.Pointer<CError> ChainEee_updateAuthDigitList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCEeeChainTokenAuth> authTokens,
  ) {
    return _ChainEee_updateAuthDigitList(
      ctx,
      authTokens,
    );
  }

  late final _ChainEee_updateAuthDigitListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<CArrayCEeeChainTokenAuth>)>>(
      'ChainEee_updateAuthDigitList');
  late final _ChainEee_updateAuthDigitList =
      _ChainEee_updateAuthDigitListPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>, ffi.Pointer<CArrayCEeeChainTokenAuth>)>();

  ffi.Pointer<CError> ChainEee_updateDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCEeeChainTokenDefault> defaultTokens,
  ) {
    return _ChainEee_updateDefaultTokenList(
      ctx,
      defaultTokens,
    );
  }

  late final _ChainEee_updateDefaultTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<CArrayCEeeChainTokenDefault>)>>(
      'ChainEee_updateDefaultTokenList');
  late final _ChainEee_updateDefaultTokenList =
      _ChainEee_updateDefaultTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<CArrayCEeeChainTokenDefault>)>();

  ffi.Pointer<CError> ChainEee_getAuthTokenList(
    ffi.Pointer<CContext> ctx,
    int startItem,
    int pageSize,
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>> tokens,
  ) {
    return _ChainEee_getAuthTokenList(
      ctx,
      startItem,
      pageSize,
      tokens,
    );
  }

  late final _ChainEee_getAuthTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>>)>>(
      'ChainEee_getAuthTokenList');
  late final _ChainEee_getAuthTokenList =
      _ChainEee_getAuthTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>, int, int,
              ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>>)>();

  ffi.Pointer<CError> ChainEee_getDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>> tokens,
  ) {
    return _ChainEee_getDefaultTokenList(
      ctx,
      tokens,
    );
  }

  late final _ChainEee_getDefaultTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>>)>>(
      'ChainEee_getDefaultTokenList');
  late final _ChainEee_getDefaultTokenList =
      _ChainEee_getDefaultTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>>)>();

  ffi.Pointer<CError> ChainEth_decodeAdditionData(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> encodeData,
    ffi.Pointer<ffi.Pointer<ffi.Char>> additionData,
  ) {
    return _ChainEth_decodeAdditionData(
      ctx,
      encodeData,
      additionData,
    );
  }

  late final _ChainEth_decodeAdditionDataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'ChainEth_decodeAdditionData');
  late final _ChainEth_decodeAdditionData =
      _ChainEth_decodeAdditionDataPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> ChainEth_txSign(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CEthTransferPayload> txPayload,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Pointer<ffi.Char>> signResult,
  ) {
    return _ChainEth_txSign(
      ctx,
      txPayload,
      password,
      signResult,
    );
  }

  late final _ChainEth_txSignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<CEthTransferPayload>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('ChainEth_txSign');
  late final _ChainEth_txSign = _ChainEth_txSignPtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>,
          ffi.Pointer<CEthTransferPayload>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> ChainEth_rawTxSign(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CEthRawTxPayload> rawTxPayload,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Pointer<ffi.Char>> signResult,
  ) {
    return _ChainEth_rawTxSign(
      ctx,
      rawTxPayload,
      password,
      signResult,
    );
  }

  late final _ChainEth_rawTxSignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<CEthRawTxPayload>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('ChainEth_rawTxSign');
  late final _ChainEth_rawTxSign = _ChainEth_rawTxSignPtr.asFunction<
      ffi.Pointer<CError> Function(
          ffi.Pointer<CContext>,
          ffi.Pointer<CEthRawTxPayload>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> ChainEth_walletConnectTxSign(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CEthWalletConnectTx> wallet_connect_tx,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Pointer<ffi.Char>> signResult,
  ) {
    return _ChainEth_walletConnectTxSign(
      ctx,
      wallet_connect_tx,
      password,
      signResult,
    );
  }

  late final _ChainEth_walletConnectTxSignPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.Pointer<CEthWalletConnectTx>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'ChainEth_walletConnectTxSign');
  late final _ChainEth_walletConnectTxSign =
      _ChainEth_walletConnectTxSignPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<CEthWalletConnectTx>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CError> ChainEth_updateAuthTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCEthChainTokenAuth> authTokens,
  ) {
    return _ChainEth_updateAuthTokenList(
      ctx,
      authTokens,
    );
  }

  late final _ChainEth_updateAuthTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<CArrayCEthChainTokenAuth>)>>(
      'ChainEth_updateAuthTokenList');
  late final _ChainEth_updateAuthTokenList =
      _ChainEth_updateAuthTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>, ffi.Pointer<CArrayCEthChainTokenAuth>)>();

  ffi.Pointer<CError> ChainEth_getAuthTokenList(
    ffi.Pointer<CContext> ctx,
    int startItem,
    int pageSize,
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> tokens,
  ) {
    return _ChainEth_getAuthTokenList(
      ctx,
      startItem,
      pageSize,
      tokens,
    );
  }

  late final _ChainEth_getAuthTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>>)>>(
      'ChainEth_getAuthTokenList');
  late final _ChainEth_getAuthTokenList =
      _ChainEth_getAuthTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>, int, int,
              ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>>)>();

  ffi.Pointer<CError> ChainEth_updateDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCEthChainTokenDefault> defaultTokens,
  ) {
    return _ChainEth_updateDefaultTokenList(
      ctx,
      defaultTokens,
    );
  }

  late final _ChainEth_updateDefaultTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<CArrayCEthChainTokenDefault>)>>(
      'ChainEth_updateDefaultTokenList');
  late final _ChainEth_updateDefaultTokenList =
      _ChainEth_updateDefaultTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<CArrayCEthChainTokenDefault>)>();

  ffi.Pointer<CError> ChainEth_getDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>> tokens,
  ) {
    return _ChainEth_getDefaultTokenList(
      ctx,
      tokens,
    );
  }

  late final _ChainEth_getDefaultTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>>)>>(
      'ChainEth_getDefaultTokenList');
  late final _ChainEth_getDefaultTokenList =
      _ChainEth_getDefaultTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>>)>();

  ffi.Pointer<CError> ChainEth_updateNonAuthTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCEthChainTokenNonAuth> tokens,
  ) {
    return _ChainEth_updateNonAuthTokenList(
      ctx,
      tokens,
    );
  }

  late final _ChainEth_updateNonAuthTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<CArrayCEthChainTokenNonAuth>)>>(
      'ChainEth_updateNonAuthTokenList');
  late final _ChainEth_updateNonAuthTokenList =
      _ChainEth_updateNonAuthTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<CArrayCEthChainTokenNonAuth>)>();

  ffi.Pointer<CError> ChainEth_getNonAuthTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>> tokens,
  ) {
    return _ChainEth_getNonAuthTokenList(
      ctx,
      tokens,
    );
  }

  late final _ChainEth_getNonAuthTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>>)>>(
      'ChainEth_getNonAuthTokenList');
  late final _ChainEth_getNonAuthTokenList =
      _ChainEth_getNonAuthTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>>)>();

  ffi.Pointer<CError> ChainEth_queryAuthTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Char> tokenName,
    ffi.Pointer<ffi.Char> contract,
    int startItem,
    int pageSize,
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> tokens,
  ) {
    return _ChainEth_queryAuthTokenList(
      ctx,
      tokenName,
      contract,
      startItem,
      pageSize,
      tokens,
    );
  }

  late final _ChainEth_queryAuthTokenListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CError> Function(
                  ffi.Pointer<CContext>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>>)>>(
      'ChainEth_queryAuthTokenList');
  late final _ChainEth_queryAuthTokenList =
      _ChainEth_queryAuthTokenListPtr.asFunction<
          ffi.Pointer<CError> Function(
              ffi.Pointer<CContext>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>>)>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class CContext extends ffi.Struct {
  external ffi.Pointer<ffi.Char> id;

  external ffi.Pointer<ffi.Char> contextNote;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCContext extends ffi.Struct {
  external ffi.Pointer<CContext> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

typedef CU64 = ffi.Uint64;

final class CError extends ffi.Struct {
  @CU64()
  external int code;

  external ffi.Pointer<ffi.Char> message;
}

final class CAddress extends ffi.Struct {
  external ffi.Pointer<ffi.Char> id;

  external ffi.Pointer<ffi.Char> walletId;

  external ffi.Pointer<ffi.Char> chainType;

  external ffi.Pointer<ffi.Char> address;

  external ffi.Pointer<ffi.Char> publicKey;

  @CBool()
  external int isWalletAddress;

  @CBool()
  external int show1;
}

typedef CBool = ffi.Uint32;

final class CChainShared extends ffi.Struct {
  external ffi.Pointer<ffi.Char> walletId;

  external ffi.Pointer<ffi.Char> chainType;

  external ffi.Pointer<CAddress> walletAddress;
}

final class CTokenShared extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> symbol;

  external ffi.Pointer<ffi.Char> logoUrl;

  external ffi.Pointer<ffi.Char> logoBytes;

  external ffi.Pointer<ffi.Char> projectName;

  external ffi.Pointer<ffi.Char> projectHome;

  external ffi.Pointer<ffi.Char> projectNote;
}

final class CEthChainTokenShared extends ffi.Struct {
  external ffi.Pointer<CTokenShared> tokenShared;

  external ffi.Pointer<ffi.Char> tokenType;

  @ffi.Int64()
  external int gasLimit;

  external ffi.Pointer<ffi.Char> gasPrice;

  @ffi.Int32()
  external int decimal;
}

final class CEthChainToken extends ffi.Struct {
  external ffi.Pointer<ffi.Char> chainTokenSharedId;

  @CBool()
  external int show1;

  external ffi.Pointer<ffi.Char> contractAddress;

  external ffi.Pointer<CEthChainTokenShared> ethChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCEthChainToken extends ffi.Struct {
  external ffi.Pointer<CEthChainToken> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CEthChain extends ffi.Struct {
  external ffi.Pointer<CChainShared> chainShared;

  external ffi.Pointer<CArrayCEthChainToken> tokens;
}

final class CEeeChainTokenShared extends ffi.Struct {
  external ffi.Pointer<CTokenShared> tokenShared;

  external ffi.Pointer<ffi.Char> tokenType;

  @ffi.Int64()
  external int gasLimit;

  external ffi.Pointer<ffi.Char> gasPrice;

  @ffi.Int32()
  external int decimal;
}

final class CEeeChainToken extends ffi.Struct {
  @CBool()
  external int show1;

  external ffi.Pointer<ffi.Char> chainTokenSharedId;

  external ffi.Pointer<CEeeChainTokenShared> eeeChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCEeeChainToken extends ffi.Struct {
  external ffi.Pointer<CEeeChainToken> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CEeeChain extends ffi.Struct {
  external ffi.Pointer<CChainShared> chainShared;

  external ffi.Pointer<CArrayCEeeChainToken> tokens;
}

final class CBtcChainTokenShared extends ffi.Struct {
  external ffi.Pointer<CTokenShared> tokenShared;

  external ffi.Pointer<ffi.Char> tokenType;

  @ffi.Int64()
  external int fee_per_byte;

  @ffi.Int32()
  external int decimal;
}

final class CBtcChainToken extends ffi.Struct {
  @CBool()
  external int show1;

  external ffi.Pointer<ffi.Char> chainTokenSharedId;

  external ffi.Pointer<CBtcChainTokenShared> btcChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCBtcChainToken extends ffi.Struct {
  external ffi.Pointer<CBtcChainToken> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CBtcChain extends ffi.Struct {
  external ffi.Pointer<CChainShared> chainShared;

  external ffi.Pointer<CArrayCBtcChainToken> tokens;
}

final class CWallet extends ffi.Struct {
  external ffi.Pointer<ffi.Char> id;

  external ffi.Pointer<ffi.Char> nextId;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> walletType;

  external ffi.Pointer<CEthChain> ethChain;

  external ffi.Pointer<CEeeChain> eeeChain;

  external ffi.Pointer<CBtcChain> btcChain;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCWallet extends ffi.Struct {
  external ffi.Pointer<CWallet> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CDbName extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;

  external ffi.Pointer<ffi.Char> prefix;

  external ffi.Pointer<ffi.Char> cashboxWallets;

  external ffi.Pointer<ffi.Char> cashboxMnemonic;

  external ffi.Pointer<ffi.Char> walletMainnet;

  external ffi.Pointer<ffi.Char> walletPrivate;

  external ffi.Pointer<ffi.Char> walletTestnet;

  external ffi.Pointer<ffi.Char> walletTestnetPrivate;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayI64 extends ffi.Struct {
  external ffi.Pointer<ffi.Int64> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CAccountInfoSyncProg extends ffi.Struct {
  external ffi.Pointer<ffi.Char> account;

  external ffi.Pointer<ffi.Char> blockNo;

  external ffi.Pointer<ffi.Char> blockHash;
}

final class CAccountInfo extends ffi.Struct {
  @ffi.Uint32()
  external int nonce;

  @ffi.Uint32()
  external int refCount;

  external ffi.Pointer<ffi.Char> freeBalance;

  external ffi.Pointer<ffi.Char> reserved;

  external ffi.Pointer<ffi.Char> miscFrozen;

  external ffi.Pointer<ffi.Char> feeFrozen;
}

final class CSubChainBasicInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> genesisHash;

  external ffi.Pointer<ffi.Char> metadata;

  @ffi.Int32()
  external int runtimeVersion;

  @ffi.Int32()
  external int txVersion;

  @ffi.Int32()
  external int ss58FormatPrefix;

  @ffi.Int32()
  external int tokenDecimals;

  external ffi.Pointer<ffi.Char> tokenSymbol;

  @CBool()
  external int isDefault;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCChar extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Char>> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CChainVersion extends ffi.Struct {
  external ffi.Pointer<ffi.Char> genesisHash;

  @ffi.Int32()
  external int runtimeVersion;

  @ffi.Int32()
  external int txVersion;
}

final class CExtrinsicContext extends ffi.Struct {
  external ffi.Pointer<CChainVersion> chainVersion;

  external ffi.Pointer<ffi.Char> account;

  external ffi.Pointer<ffi.Char> blockHash;

  external ffi.Pointer<ffi.Char> blockNumber;

  external ffi.Pointer<ffi.Char> event;

  external ffi.Pointer<CArrayCChar> extrinsics;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCExtrinsicContext extends ffi.Struct {
  external ffi.Pointer<CExtrinsicContext> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CTokenAddress extends ffi.Struct {
  external ffi.Pointer<ffi.Char> walletId;

  external ffi.Pointer<ffi.Char> chainType;

  external ffi.Pointer<ffi.Char> tokenId;

  external ffi.Pointer<ffi.Char> addressId;

  external ffi.Pointer<ffi.Char> balance;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCTokenAddress extends ffi.Struct {
  external ffi.Pointer<CTokenAddress> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CEthChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<ffi.Char> chainTokenSharedId;

  external ffi.Pointer<ffi.Char> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<ffi.Char> contractAddress;

  external ffi.Pointer<CEthChainTokenShared> ethChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCEthChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<CEthChainTokenAuth> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CEthChainTokenNonAuth extends ffi.Struct {
  external ffi.Pointer<ffi.Char> chainTokenSharedId;

  external ffi.Pointer<ffi.Char> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<ffi.Char> contractAddress;

  external ffi.Pointer<CEthChainTokenShared> ethChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCEthChainTokenNonAuth extends ffi.Struct {
  external ffi.Pointer<CEthChainTokenNonAuth> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CEthChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<ffi.Char> chainTokenSharedId;

  external ffi.Pointer<ffi.Char> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<ffi.Char> contractAddress;

  external ffi.Pointer<CEthChainTokenShared> ethChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCEthChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<CEthChainTokenDefault> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CEeeChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<ffi.Char> chainTokenSharedId;

  external ffi.Pointer<ffi.Char> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<CEeeChainTokenShared> eeeChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCEeeChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<CEeeChainTokenDefault> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CBtcChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<ffi.Char> chainTokenSharedId;

  external ffi.Pointer<ffi.Char> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<CBtcChainTokenShared> btcChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCBtcChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<CBtcChainTokenDefault> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CEeeChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<ffi.Char> chainTokenSharedId;

  external ffi.Pointer<ffi.Char> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<CEeeChainTokenShared> eeeChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCEeeChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<CEeeChainTokenAuth> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CBtcChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<ffi.Char> chainTokenSharedId;

  external ffi.Pointer<ffi.Char> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<CBtcChainTokenShared> btcChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCBtcChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<CBtcChainTokenAuth> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CEeeChainTx extends ffi.Struct {
  external ffi.Pointer<ffi.Char> txHash;

  external ffi.Pointer<ffi.Char> blockHash;

  external ffi.Pointer<ffi.Char> blockNumber;

  external ffi.Pointer<ffi.Char> signer;

  external ffi.Pointer<ffi.Char> walletAccount;

  external ffi.Pointer<ffi.Char> fromAddress;

  external ffi.Pointer<ffi.Char> toAddress;

  external ffi.Pointer<ffi.Char> value;

  external ffi.Pointer<ffi.Char> extension1;

  @CBool()
  external int status;

  @ffi.Int64()
  external int txTimestamp;

  external ffi.Pointer<ffi.Char> txBytes;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
final class CArrayCEeeChainTx extends ffi.Struct {
  external ffi.Pointer<CEeeChainTx> ptr;

  @CU64()
  external int len;

  @CU64()
  external int cap;
}

final class CWalletTokenStatus extends ffi.Struct {
  external ffi.Pointer<ffi.Char> walletId;

  external ffi.Pointer<ffi.Char> chainType;

  external ffi.Pointer<ffi.Char> tokenId;

  @CBool()
  external int isShow;
}

final class CBtcNowLoadBlock extends ffi.Struct {
  @ffi.Uint64()
  external int height;

  external ffi.Pointer<ffi.Char> headerHash;

  external ffi.Pointer<ffi.Char> timestamp;
}

final class CBtcBalance extends ffi.Struct {
  @ffi.Uint64()
  external int balance;

  @ffi.Uint64()
  external int height;
}

final class CEthWalletConnectTx extends ffi.Struct {
  external ffi.Pointer<ffi.Char> from;

  external ffi.Pointer<ffi.Char> to;

  external ffi.Pointer<ffi.Char> data;

  external ffi.Pointer<ffi.Char> gasPrice;

  external ffi.Pointer<ffi.Char> gas;

  external ffi.Pointer<ffi.Char> value;

  external ffi.Pointer<ffi.Char> nonce;

  external ffi.Pointer<ffi.Char> maxPriorityFeePerGas;

  @ffi.Uint32()
  external int typeTxId;
}

final class CInitParameters extends ffi.Struct {
  external ffi.Pointer<CDbName> dbName;

  @CBool()
  external int isMemoryDb;

  external ffi.Pointer<ffi.Char> contextNote;
}

final class CCreateWalletParameters extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> password;

  external ffi.Pointer<ffi.Char> mnemonic;

  external ffi.Pointer<ffi.Char> walletType;
}

final class CBtcTxParam extends ffi.Struct {
  external ffi.Pointer<ffi.Char> walletId;

  external ffi.Pointer<ffi.Char> password;

  external ffi.Pointer<ffi.Char> from_address;

  external ffi.Pointer<ffi.Char> to_address;

  external ffi.Pointer<ffi.Char> value;

  @CBool()
  external int broadcast;
}

final class CDecodeAccountInfoParameters extends ffi.Struct {
  external ffi.Pointer<ffi.Char> encodeData;

  external ffi.Pointer<CChainVersion> chainVersion;
}

final class CStorageKeyParameters extends ffi.Struct {
  external ffi.Pointer<CChainVersion> chainVersion;

  external ffi.Pointer<ffi.Char> module;

  external ffi.Pointer<ffi.Char> storageItem;

  external ffi.Pointer<ffi.Char> account;
}

final class CEeeTransferPayload extends ffi.Struct {
  external ffi.Pointer<ffi.Char> fromAccount;

  external ffi.Pointer<ffi.Char> toAccount;

  external ffi.Pointer<ffi.Char> value;

  @ffi.Uint32()
  external int index;

  external ffi.Pointer<CChainVersion> chainVersion;

  external ffi.Pointer<ffi.Char> extData;

  external ffi.Pointer<ffi.Char> password;
}

final class CRawTxParam extends ffi.Struct {
  external ffi.Pointer<ffi.Char> rawTx;

  external ffi.Pointer<ffi.Char> walletId;

  external ffi.Pointer<ffi.Char> password;
}

final class CEthTransferPayload extends ffi.Struct {
  external ffi.Pointer<ffi.Char> fromAddress;

  external ffi.Pointer<ffi.Char> toAddress;

  external ffi.Pointer<ffi.Char> contractAddress;

  external ffi.Pointer<ffi.Char> value;

  external ffi.Pointer<ffi.Char> nonce;

  external ffi.Pointer<ffi.Char> gasPrice;

  external ffi.Pointer<ffi.Char> gasLimit;

  @ffi.Uint32()
  external int decimal;

  external ffi.Pointer<ffi.Char> extData;
}

final class CEthRawTxPayload extends ffi.Struct {
  external ffi.Pointer<ffi.Char> fromAddress;

  external ffi.Pointer<ffi.Char> rawTx;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;
