// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class CWallets {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CWallets(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CWallets.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// alloc ** [parameters::CContext]
  ffi.Pointer<ffi.Pointer<CContext>> CContext_dAlloc() {
    return _CContext_dAlloc();
  }

  late final _CContext_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CContext_dAlloc>>('CContext_dAlloc');
  late final _dart_CContext_dAlloc _CContext_dAlloc =
      _CContext_dAlloc_ptr.asFunction<_dart_CContext_dAlloc>();

  /// free ** [parameters::CContext]
  void CContext_dFree(
    ffi.Pointer<ffi.Pointer<CContext>> dPtr,
  ) {
    return _CContext_dFree(
      dPtr,
    );
  }

  late final _CContext_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CContext_dFree>>('CContext_dFree');
  late final _dart_CContext_dFree _CContext_dFree =
      _CContext_dFree_ptr.asFunction<_dart_CContext_dFree>();

  /// alloc ** [CArray]
  ffi.Pointer<ffi.Pointer<CArrayCContext>> CArrayCContext_dAlloc() {
    return _CArrayCContext_dAlloc();
  }

  late final _CArrayCContext_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCContext_dAlloc>>(
          'CArrayCContext_dAlloc');
  late final _dart_CArrayCContext_dAlloc _CArrayCContext_dAlloc =
      _CArrayCContext_dAlloc_ptr.asFunction<_dart_CArrayCContext_dAlloc>();

  void CArrayCContext_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCContext>> dPtr,
  ) {
    return _CArrayCContext_dFree(
      dPtr,
    );
  }

  late final _CArrayCContext_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCContext_dFree>>(
          'CArrayCContext_dFree');
  late final _dart_CArrayCContext_dFree _CArrayCContext_dFree =
      _CArrayCContext_dFree_ptr.asFunction<_dart_CArrayCContext_dFree>();

  void CStr_free(
    ffi.Pointer<ffi.Int8> dcs,
  ) {
    return _CStr_free(
      dcs,
    );
  }

  late final _CStr_free_ptr =
      _lookup<ffi.NativeFunction<_c_CStr_free>>('CStr_free');
  late final _dart_CStr_free _CStr_free =
      _CStr_free_ptr.asFunction<_dart_CStr_free>();

  void CStr_dFree(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> dcs,
  ) {
    return _CStr_dFree(
      dcs,
    );
  }

  late final _CStr_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CStr_dFree>>('CStr_dFree');
  late final _dart_CStr_dFree _CStr_dFree =
      _CStr_dFree_ptr.asFunction<_dart_CStr_dFree>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> CStr_dAlloc() {
    return _CStr_dAlloc();
  }

  late final _CStr_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CStr_dAlloc>>('CStr_dAlloc');
  late final _dart_CStr_dAlloc _CStr_dAlloc =
      _CStr_dAlloc_ptr.asFunction<_dart_CStr_dAlloc>();

  void CBool_free(
    ffi.Pointer<ffi.Uint32> dcs,
  ) {
    return _CBool_free(
      dcs,
    );
  }

  late final _CBool_free_ptr =
      _lookup<ffi.NativeFunction<_c_CBool_free>>('CBool_free');
  late final _dart_CBool_free _CBool_free =
      _CBool_free_ptr.asFunction<_dart_CBool_free>();

  ffi.Pointer<ffi.Uint32> CBool_alloc() {
    return _CBool_alloc();
  }

  late final _CBool_alloc_ptr =
      _lookup<ffi.NativeFunction<_c_CBool_alloc>>('CBool_alloc');
  late final _dart_CBool_alloc _CBool_alloc =
      _CBool_alloc_ptr.asFunction<_dart_CBool_alloc>();

  void CError_free(
    ffi.Pointer<CError> error,
  ) {
    return _CError_free(
      error,
    );
  }

  late final _CError_free_ptr =
      _lookup<ffi.NativeFunction<_c_CError_free>>('CError_free');
  late final _dart_CError_free _CError_free =
      _CError_free_ptr.asFunction<_dart_CError_free>();

  ffi.Pointer<ffi.Pointer<CWallet>> CWallet_dAlloc() {
    return _CWallet_dAlloc();
  }

  late final _CWallet_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CWallet_dAlloc>>('CWallet_dAlloc');
  late final _dart_CWallet_dAlloc _CWallet_dAlloc =
      _CWallet_dAlloc_ptr.asFunction<_dart_CWallet_dAlloc>();

  void CWallet_dFree(
    ffi.Pointer<ffi.Pointer<CWallet>> dPtr,
  ) {
    return _CWallet_dFree(
      dPtr,
    );
  }

  late final _CWallet_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CWallet_dFree>>('CWallet_dFree');
  late final _dart_CWallet_dFree _CWallet_dFree =
      _CWallet_dFree_ptr.asFunction<_dart_CWallet_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCWallet>> CArrayCWallet_dAlloc() {
    return _CArrayCWallet_dAlloc();
  }

  late final _CArrayCWallet_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCWallet_dAlloc>>(
          'CArrayCWallet_dAlloc');
  late final _dart_CArrayCWallet_dAlloc _CArrayCWallet_dAlloc =
      _CArrayCWallet_dAlloc_ptr.asFunction<_dart_CArrayCWallet_dAlloc>();

  void CArrayCWallet_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCWallet>> dPtr,
  ) {
    return _CArrayCWallet_dFree(
      dPtr,
    );
  }

  late final _CArrayCWallet_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCWallet_dFree>>(
          'CArrayCWallet_dFree');
  late final _dart_CArrayCWallet_dFree _CArrayCWallet_dFree =
      _CArrayCWallet_dFree_ptr.asFunction<_dart_CArrayCWallet_dFree>();

  ffi.Pointer<ffi.Pointer<CDbName>> CDbName_dAlloc() {
    return _CDbName_dAlloc();
  }

  late final _CDbName_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CDbName_dAlloc>>('CDbName_dAlloc');
  late final _dart_CDbName_dAlloc _CDbName_dAlloc =
      _CDbName_dAlloc_ptr.asFunction<_dart_CDbName_dAlloc>();

  void CDbName_dFree(
    ffi.Pointer<ffi.Pointer<CDbName>> dPtr,
  ) {
    return _CDbName_dFree(
      dPtr,
    );
  }

  late final _CDbName_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CDbName_dFree>>('CDbName_dFree');
  late final _dart_CDbName_dFree _CDbName_dFree =
      _CDbName_dFree_ptr.asFunction<_dart_CDbName_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayI64>> CArrayInt64_dAlloc() {
    return _CArrayInt64_dAlloc();
  }

  late final _CArrayInt64_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayInt64_dAlloc>>('CArrayInt64_dAlloc');
  late final _dart_CArrayInt64_dAlloc _CArrayInt64_dAlloc =
      _CArrayInt64_dAlloc_ptr.asFunction<_dart_CArrayInt64_dAlloc>();

  void CArrayInt64_dFree(
    ffi.Pointer<ffi.Pointer<CArrayI64>> dPtr,
  ) {
    return _CArrayInt64_dFree(
      dPtr,
    );
  }

  late final _CArrayInt64_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayInt64_dFree>>('CArrayInt64_dFree');
  late final _dart_CArrayInt64_dFree _CArrayInt64_dFree =
      _CArrayInt64_dFree_ptr.asFunction<_dart_CArrayInt64_dFree>();

  ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> CAccountInfoSyncProg_dAlloc() {
    return _CAccountInfoSyncProg_dAlloc();
  }

  late final _CAccountInfoSyncProg_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CAccountInfoSyncProg_dAlloc>>(
          'CAccountInfoSyncProg_dAlloc');
  late final _dart_CAccountInfoSyncProg_dAlloc _CAccountInfoSyncProg_dAlloc =
      _CAccountInfoSyncProg_dAlloc_ptr.asFunction<
          _dart_CAccountInfoSyncProg_dAlloc>();

  void CAccountInfoSyncProg_dFree(
    ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> dPtr,
  ) {
    return _CAccountInfoSyncProg_dFree(
      dPtr,
    );
  }

  late final _CAccountInfoSyncProg_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CAccountInfoSyncProg_dFree>>(
          'CAccountInfoSyncProg_dFree');
  late final _dart_CAccountInfoSyncProg_dFree _CAccountInfoSyncProg_dFree =
      _CAccountInfoSyncProg_dFree_ptr.asFunction<
          _dart_CAccountInfoSyncProg_dFree>();

  ffi.Pointer<ffi.Pointer<CAccountInfo>> CAccountInfo_dAlloc() {
    return _CAccountInfo_dAlloc();
  }

  late final _CAccountInfo_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CAccountInfo_dAlloc>>(
          'CAccountInfo_dAlloc');
  late final _dart_CAccountInfo_dAlloc _CAccountInfo_dAlloc =
      _CAccountInfo_dAlloc_ptr.asFunction<_dart_CAccountInfo_dAlloc>();

  void CAccountInfo_dFree(
    ffi.Pointer<ffi.Pointer<CAccountInfo>> dPtr,
  ) {
    return _CAccountInfo_dFree(
      dPtr,
    );
  }

  late final _CAccountInfo_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CAccountInfo_dFree>>('CAccountInfo_dFree');
  late final _dart_CAccountInfo_dFree _CAccountInfo_dFree =
      _CAccountInfo_dFree_ptr.asFunction<_dart_CAccountInfo_dFree>();

  ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> CSubChainBasicInfo_dAlloc() {
    return _CSubChainBasicInfo_dAlloc();
  }

  late final _CSubChainBasicInfo_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CSubChainBasicInfo_dAlloc>>(
          'CSubChainBasicInfo_dAlloc');
  late final _dart_CSubChainBasicInfo_dAlloc _CSubChainBasicInfo_dAlloc =
      _CSubChainBasicInfo_dAlloc_ptr.asFunction<
          _dart_CSubChainBasicInfo_dAlloc>();

  void CSubChainBasicInfo_dFree(
    ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> dPtr,
  ) {
    return _CSubChainBasicInfo_dFree(
      dPtr,
    );
  }

  late final _CSubChainBasicInfo_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CSubChainBasicInfo_dFree>>(
          'CSubChainBasicInfo_dFree');
  late final _dart_CSubChainBasicInfo_dFree _CSubChainBasicInfo_dFree =
      _CSubChainBasicInfo_dFree_ptr.asFunction<
          _dart_CSubChainBasicInfo_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCChar>> CArrayCChar_dAlloc() {
    return _CArrayCChar_dAlloc();
  }

  late final _CArrayCChar_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCChar_dAlloc>>('CArrayCChar_dAlloc');
  late final _dart_CArrayCChar_dAlloc _CArrayCChar_dAlloc =
      _CArrayCChar_dAlloc_ptr.asFunction<_dart_CArrayCChar_dAlloc>();

  void CArrayCChar_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCChar>> dPtr,
  ) {
    return _CArrayCChar_dFree(
      dPtr,
    );
  }

  late final _CArrayCChar_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCChar_dFree>>('CArrayCChar_dFree');
  late final _dart_CArrayCChar_dFree _CArrayCChar_dFree =
      _CArrayCChar_dFree_ptr.asFunction<_dart_CArrayCChar_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>> CExtrinsicContext_dAlloc() {
    return _CExtrinsicContext_dAlloc();
  }

  late final _CExtrinsicContext_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CExtrinsicContext_dAlloc>>(
          'CExtrinsicContext_dAlloc');
  late final _dart_CExtrinsicContext_dAlloc _CExtrinsicContext_dAlloc =
      _CExtrinsicContext_dAlloc_ptr.asFunction<
          _dart_CExtrinsicContext_dAlloc>();

  void CExtrinsicContext_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>> dPtr,
  ) {
    return _CExtrinsicContext_dFree(
      dPtr,
    );
  }

  late final _CExtrinsicContext_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CExtrinsicContext_dFree>>(
          'CExtrinsicContext_dFree');
  late final _dart_CExtrinsicContext_dFree _CExtrinsicContext_dFree =
      _CExtrinsicContext_dFree_ptr.asFunction<_dart_CExtrinsicContext_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> CArrayCTokenAddress_dAlloc() {
    return _CArrayCTokenAddress_dAlloc();
  }

  late final _CArrayCTokenAddress_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCTokenAddress_dAlloc>>(
          'CArrayCTokenAddress_dAlloc');
  late final _dart_CArrayCTokenAddress_dAlloc _CArrayCTokenAddress_dAlloc =
      _CArrayCTokenAddress_dAlloc_ptr.asFunction<
          _dart_CArrayCTokenAddress_dAlloc>();

  void CArrayCTokenAddress_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> dPtr,
  ) {
    return _CArrayCTokenAddress_dFree(
      dPtr,
    );
  }

  late final _CArrayCTokenAddress_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCTokenAddress_dFree>>(
          'CArrayCTokenAddress_dFree');
  late final _dart_CArrayCTokenAddress_dFree _CArrayCTokenAddress_dFree =
      _CArrayCTokenAddress_dFree_ptr.asFunction<
          _dart_CArrayCTokenAddress_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>>
      CArrayCEthChainTokenAuth_dAlloc() {
    return _CArrayCEthChainTokenAuth_dAlloc();
  }

  late final _CArrayCEthChainTokenAuth_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEthChainTokenAuth_dAlloc>>(
          'CArrayCEthChainTokenAuth_dAlloc');
  late final _dart_CArrayCEthChainTokenAuth_dAlloc
      _CArrayCEthChainTokenAuth_dAlloc = _CArrayCEthChainTokenAuth_dAlloc_ptr
          .asFunction<_dart_CArrayCEthChainTokenAuth_dAlloc>();

  void CArrayCEthChainTokenAuth_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> dPtr,
  ) {
    return _CArrayCEthChainTokenAuth_dFree(
      dPtr,
    );
  }

  late final _CArrayCEthChainTokenAuth_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEthChainTokenAuth_dFree>>(
          'CArrayCEthChainTokenAuth_dFree');
  late final _dart_CArrayCEthChainTokenAuth_dFree
      _CArrayCEthChainTokenAuth_dFree = _CArrayCEthChainTokenAuth_dFree_ptr
          .asFunction<_dart_CArrayCEthChainTokenAuth_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>>
      CArrayCEthChainTokenNonAuth_dAlloc() {
    return _CArrayCEthChainTokenNonAuth_dAlloc();
  }

  late final _CArrayCEthChainTokenNonAuth_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEthChainTokenNonAuth_dAlloc>>(
          'CArrayCEthChainTokenNonAuth_dAlloc');
  late final _dart_CArrayCEthChainTokenNonAuth_dAlloc
      _CArrayCEthChainTokenNonAuth_dAlloc =
      _CArrayCEthChainTokenNonAuth_dAlloc_ptr.asFunction<
          _dart_CArrayCEthChainTokenNonAuth_dAlloc>();

  void CArrayCEthChainTokenNonAuth_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>> dPtr,
  ) {
    return _CArrayCEthChainTokenNonAuth_dFree(
      dPtr,
    );
  }

  late final _CArrayCEthChainTokenNonAuth_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEthChainTokenNonAuth_dFree>>(
          'CArrayCEthChainTokenNonAuth_dFree');
  late final _dart_CArrayCEthChainTokenNonAuth_dFree
      _CArrayCEthChainTokenNonAuth_dFree =
      _CArrayCEthChainTokenNonAuth_dFree_ptr.asFunction<
          _dart_CArrayCEthChainTokenNonAuth_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>>
      CArrayCEthChainTokenDefault_dAlloc() {
    return _CArrayCEthChainTokenDefault_dAlloc();
  }

  late final _CArrayCEthChainTokenDefault_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEthChainTokenDefault_dAlloc>>(
          'CArrayCEthChainTokenDefault_dAlloc');
  late final _dart_CArrayCEthChainTokenDefault_dAlloc
      _CArrayCEthChainTokenDefault_dAlloc =
      _CArrayCEthChainTokenDefault_dAlloc_ptr.asFunction<
          _dart_CArrayCEthChainTokenDefault_dAlloc>();

  void CArrayCEthChainTokenDefault_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>> dPtr,
  ) {
    return _CArrayCEthChainTokenDefault_dFree(
      dPtr,
    );
  }

  late final _CArrayCEthChainTokenDefault_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEthChainTokenDefault_dFree>>(
          'CArrayCEthChainTokenDefault_dFree');
  late final _dart_CArrayCEthChainTokenDefault_dFree
      _CArrayCEthChainTokenDefault_dFree =
      _CArrayCEthChainTokenDefault_dFree_ptr.asFunction<
          _dart_CArrayCEthChainTokenDefault_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>>
      CArrayCEeeChainTokenDefault_dAlloc() {
    return _CArrayCEeeChainTokenDefault_dAlloc();
  }

  late final _CArrayCEeeChainTokenDefault_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEeeChainTokenDefault_dAlloc>>(
          'CArrayCEeeChainTokenDefault_dAlloc');
  late final _dart_CArrayCEeeChainTokenDefault_dAlloc
      _CArrayCEeeChainTokenDefault_dAlloc =
      _CArrayCEeeChainTokenDefault_dAlloc_ptr.asFunction<
          _dart_CArrayCEeeChainTokenDefault_dAlloc>();

  void CArrayCEeeChainTokenDefault_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>> dPtr,
  ) {
    return _CArrayCEeeChainTokenDefault_dFree(
      dPtr,
    );
  }

  late final _CArrayCEeeChainTokenDefault_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEeeChainTokenDefault_dFree>>(
          'CArrayCEeeChainTokenDefault_dFree');
  late final _dart_CArrayCEeeChainTokenDefault_dFree
      _CArrayCEeeChainTokenDefault_dFree =
      _CArrayCEeeChainTokenDefault_dFree_ptr.asFunction<
          _dart_CArrayCEeeChainTokenDefault_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>>
      CArrayCBtcChainTokenDefault_dAlloc() {
    return _CArrayCBtcChainTokenDefault_dAlloc();
  }

  late final _CArrayCBtcChainTokenDefault_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCBtcChainTokenDefault_dAlloc>>(
          'CArrayCBtcChainTokenDefault_dAlloc');
  late final _dart_CArrayCBtcChainTokenDefault_dAlloc
      _CArrayCBtcChainTokenDefault_dAlloc =
      _CArrayCBtcChainTokenDefault_dAlloc_ptr.asFunction<
          _dart_CArrayCBtcChainTokenDefault_dAlloc>();

  void CArrayCBtcChainTokenDefault_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>> dPtr,
  ) {
    return _CArrayCBtcChainTokenDefault_dFree(
      dPtr,
    );
  }

  late final _CArrayCBtcChainTokenDefault_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCBtcChainTokenDefault_dFree>>(
          'CArrayCBtcChainTokenDefault_dFree');
  late final _dart_CArrayCBtcChainTokenDefault_dFree
      _CArrayCBtcChainTokenDefault_dFree =
      _CArrayCBtcChainTokenDefault_dFree_ptr.asFunction<
          _dart_CArrayCBtcChainTokenDefault_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>>
      CArrayCEeeChainTokenAuth_dAlloc() {
    return _CArrayCEeeChainTokenAuth_dAlloc();
  }

  late final _CArrayCEeeChainTokenAuth_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEeeChainTokenAuth_dAlloc>>(
          'CArrayCEeeChainTokenAuth_dAlloc');
  late final _dart_CArrayCEeeChainTokenAuth_dAlloc
      _CArrayCEeeChainTokenAuth_dAlloc = _CArrayCEeeChainTokenAuth_dAlloc_ptr
          .asFunction<_dart_CArrayCEeeChainTokenAuth_dAlloc>();

  void CArrayCEeeChainTokenAuth_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>> dPtr,
  ) {
    return _CArrayCEeeChainTokenAuth_dFree(
      dPtr,
    );
  }

  late final _CArrayCEeeChainTokenAuth_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEeeChainTokenAuth_dFree>>(
          'CArrayCEeeChainTokenAuth_dFree');
  late final _dart_CArrayCEeeChainTokenAuth_dFree
      _CArrayCEeeChainTokenAuth_dFree = _CArrayCEeeChainTokenAuth_dFree_ptr
          .asFunction<_dart_CArrayCEeeChainTokenAuth_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>>
      CArrayCBtcChainTokenAuth_dAlloc() {
    return _CArrayCBtcChainTokenAuth_dAlloc();
  }

  late final _CArrayCBtcChainTokenAuth_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCBtcChainTokenAuth_dAlloc>>(
          'CArrayCBtcChainTokenAuth_dAlloc');
  late final _dart_CArrayCBtcChainTokenAuth_dAlloc
      _CArrayCBtcChainTokenAuth_dAlloc = _CArrayCBtcChainTokenAuth_dAlloc_ptr
          .asFunction<_dart_CArrayCBtcChainTokenAuth_dAlloc>();

  void CArrayCBtcChainTokenAuth_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>> dPtr,
  ) {
    return _CArrayCBtcChainTokenAuth_dFree(
      dPtr,
    );
  }

  late final _CArrayCBtcChainTokenAuth_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCBtcChainTokenAuth_dFree>>(
          'CArrayCBtcChainTokenAuth_dFree');
  late final _dart_CArrayCBtcChainTokenAuth_dFree
      _CArrayCBtcChainTokenAuth_dFree = _CArrayCBtcChainTokenAuth_dFree_ptr
          .asFunction<_dart_CArrayCBtcChainTokenAuth_dFree>();

  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> CArrayCEeeChainTx_dAlloc() {
    return _CArrayCEeeChainTx_dAlloc();
  }

  late final _CArrayCEeeChainTx_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEeeChainTx_dAlloc>>(
          'CArrayCEeeChainTx_dAlloc');
  late final _dart_CArrayCEeeChainTx_dAlloc _CArrayCEeeChainTx_dAlloc =
      _CArrayCEeeChainTx_dAlloc_ptr.asFunction<
          _dart_CArrayCEeeChainTx_dAlloc>();

  void CArrayCEeeChainTx_dFree(
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> dPtr,
  ) {
    return _CArrayCEeeChainTx_dFree(
      dPtr,
    );
  }

  late final _CArrayCEeeChainTx_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CArrayCEeeChainTx_dFree>>(
          'CArrayCEeeChainTx_dFree');
  late final _dart_CArrayCEeeChainTx_dFree _CArrayCEeeChainTx_dFree =
      _CArrayCEeeChainTx_dFree_ptr.asFunction<_dart_CArrayCEeeChainTx_dFree>();

  ffi.Pointer<ffi.Pointer<CWalletTokenStatus>> CWalletTokenStatus_dAlloc() {
    return _CWalletTokenStatus_dAlloc();
  }

  late final _CWalletTokenStatus_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_CWalletTokenStatus_dAlloc>>(
          'CWalletTokenStatus_dAlloc');
  late final _dart_CWalletTokenStatus_dAlloc _CWalletTokenStatus_dAlloc =
      _CWalletTokenStatus_dAlloc_ptr.asFunction<
          _dart_CWalletTokenStatus_dAlloc>();

  void CWalletTokenStatus_dFree(
    ffi.Pointer<ffi.Pointer<CWalletTokenStatus>> dPtr,
  ) {
    return _CWalletTokenStatus_dFree(
      dPtr,
    );
  }

  late final _CWalletTokenStatus_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_CWalletTokenStatus_dFree>>(
          'CWalletTokenStatus_dFree');
  late final _dart_CWalletTokenStatus_dFree _CWalletTokenStatus_dFree =
      _CWalletTokenStatus_dFree_ptr.asFunction<
          _dart_CWalletTokenStatus_dFree>();

  /// 生成数据库文件名，只有数据库文件名不存在（为null或“”）时才创建文件名
  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_dbName(
    ffi.Pointer<CDbName> name,
    ffi.Pointer<ffi.Pointer<CDbName>> outName,
  ) {
    return _Wallets_dbName(
      name,
      outName,
    );
  }

  late final _Wallets_dbName_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_dbName>>('Wallets_dbName');
  late final _dart_Wallets_dbName _Wallets_dbName =
      _Wallets_dbName_ptr.asFunction<_dart_Wallets_dbName>();

  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_init(
    ffi.Pointer<CInitParameters> parameter,
    ffi.Pointer<ffi.Pointer<CContext>> context,
  ) {
    return _Wallets_init(
      parameter,
      context,
    );
  }

  late final _Wallets_init_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_init>>('Wallets_init');
  late final _dart_Wallets_init _Wallets_init =
      _Wallets_init_ptr.asFunction<_dart_Wallets_init>();

  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_uninit(
    ffi.Pointer<CContext> ctx,
  ) {
    return _Wallets_uninit(
      ctx,
    );
  }

  late final _Wallets_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_uninit>>('Wallets_uninit');
  late final _dart_Wallets_uninit _Wallets_uninit =
      _Wallets_uninit_ptr.asFunction<_dart_Wallets_uninit>();

  /// 返回所有的Context, 有可能是0个
  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_Contexts(
    ffi.Pointer<ffi.Pointer<CArrayCContext>> contexts,
  ) {
    return _Wallets_Contexts(
      contexts,
    );
  }

  late final _Wallets_Contexts_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_Contexts>>('Wallets_Contexts');
  late final _dart_Wallets_Contexts _Wallets_Contexts =
      _Wallets_Contexts_ptr.asFunction<_dart_Wallets_Contexts>();

  /// 返回最后的Context, 有可能是空值
  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_lastContext(
    ffi.Pointer<ffi.Pointer<CContext>> context,
  ) {
    return _Wallets_lastContext(
      context,
    );
  }

  late final _Wallets_lastContext_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_lastContext>>(
          'Wallets_lastContext');
  late final _dart_Wallets_lastContext _Wallets_lastContext =
      _Wallets_lastContext_ptr.asFunction<_dart_Wallets_lastContext>();

  /// 返回第一个Context, 有可能是空值
  /// 如果成功返回 [wallets_types::Error::SUCCESS()]
  ffi.Pointer<CError> Wallets_firstContext(
    ffi.Pointer<ffi.Pointer<CContext>> context,
  ) {
    return _Wallets_firstContext(
      context,
    );
  }

  late final _Wallets_firstContext_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_firstContext>>(
          'Wallets_firstContext');
  late final _dart_Wallets_firstContext _Wallets_firstContext =
      _Wallets_firstContext_ptr.asFunction<_dart_Wallets_firstContext>();

  ffi.Pointer<CError> Wallets_lockRead(
    ffi.Pointer<CContext> ctx,
  ) {
    return _Wallets_lockRead(
      ctx,
    );
  }

  late final _Wallets_lockRead_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_lockRead>>('Wallets_lockRead');
  late final _dart_Wallets_lockRead _Wallets_lockRead =
      _Wallets_lockRead_ptr.asFunction<_dart_Wallets_lockRead>();

  ffi.Pointer<CError> Wallets_unlockRead(
    ffi.Pointer<CContext> ctx,
  ) {
    return _Wallets_unlockRead(
      ctx,
    );
  }

  late final _Wallets_unlockRead_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_unlockRead>>('Wallets_unlockRead');
  late final _dart_Wallets_unlockRead _Wallets_unlockRead =
      _Wallets_unlockRead_ptr.asFunction<_dart_Wallets_unlockRead>();

  ffi.Pointer<CError> Wallets_lockWrite(
    ffi.Pointer<CContext> ctx,
  ) {
    return _Wallets_lockWrite(
      ctx,
    );
  }

  late final _Wallets_lockWrite_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_lockWrite>>('Wallets_lockWrite');
  late final _dart_Wallets_lockWrite _Wallets_lockWrite =
      _Wallets_lockWrite_ptr.asFunction<_dart_Wallets_lockWrite>();

  ffi.Pointer<CError> Wallets_unlockWrite(
    ffi.Pointer<CContext> ctx,
  ) {
    return _Wallets_unlockWrite(
      ctx,
    );
  }

  late final _Wallets_unlockWrite_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_unlockWrite>>(
          'Wallets_unlockWrite');
  late final _dart_Wallets_unlockWrite _Wallets_unlockWrite =
      _Wallets_unlockWrite_ptr.asFunction<_dart_Wallets_unlockWrite>();

  ffi.Pointer<CError> Wallets_all(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<CArrayCWallet>> arrayWallet,
  ) {
    return _Wallets_all(
      ctx,
      arrayWallet,
    );
  }

  late final _Wallets_all_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_all>>('Wallets_all');
  late final _dart_Wallets_all _Wallets_all =
      _Wallets_all_ptr.asFunction<_dart_Wallets_all>();

  ffi.Pointer<CError> Wallets_generateMnemonic(
    int mnemonic_num,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> mnemonic,
  ) {
    return _Wallets_generateMnemonic(
      mnemonic_num,
      mnemonic,
    );
  }

  late final _Wallets_generateMnemonic_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_generateMnemonic>>(
          'Wallets_generateMnemonic');
  late final _dart_Wallets_generateMnemonic _Wallets_generateMnemonic =
      _Wallets_generateMnemonic_ptr.asFunction<
          _dart_Wallets_generateMnemonic>();

  ffi.Pointer<CError> Wallets_createWallet(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CCreateWalletParameters> parameters,
    ffi.Pointer<ffi.Pointer<CWallet>> wallet,
  ) {
    return _Wallets_createWallet(
      ctx,
      parameters,
      wallet,
    );
  }

  late final _Wallets_createWallet_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_createWallet>>(
          'Wallets_createWallet');
  late final _dart_Wallets_createWallet _Wallets_createWallet =
      _Wallets_createWallet_ptr.asFunction<_dart_Wallets_createWallet>();

  ffi.Pointer<CError> Wallets_removeWallet(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> walletId,
    ffi.Pointer<ffi.Int8> password,
  ) {
    return _Wallets_removeWallet(
      ctx,
      walletId,
      password,
    );
  }

  late final _Wallets_removeWallet_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_removeWallet>>(
          'Wallets_removeWallet');
  late final _dart_Wallets_removeWallet _Wallets_removeWallet =
      _Wallets_removeWallet_ptr.asFunction<_dart_Wallets_removeWallet>();

  ffi.Pointer<CError> Wallets_exportWallet(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> walletId,
    ffi.Pointer<ffi.Int8> password,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> mnemonic,
  ) {
    return _Wallets_exportWallet(
      ctx,
      walletId,
      password,
      mnemonic,
    );
  }

  late final _Wallets_exportWallet_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_exportWallet>>(
          'Wallets_exportWallet');
  late final _dart_Wallets_exportWallet _Wallets_exportWallet =
      _Wallets_exportWallet_ptr.asFunction<_dart_Wallets_exportWallet>();

  ffi.Pointer<CError> Wallets_resetWalletPassword(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> walletId,
    ffi.Pointer<ffi.Int8> oldPsd,
    ffi.Pointer<ffi.Int8> newPsd,
  ) {
    return _Wallets_resetWalletPassword(
      ctx,
      walletId,
      oldPsd,
      newPsd,
    );
  }

  late final _Wallets_resetWalletPassword_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_resetWalletPassword>>(
          'Wallets_resetWalletPassword');
  late final _dart_Wallets_resetWalletPassword _Wallets_resetWalletPassword =
      _Wallets_resetWalletPassword_ptr.asFunction<
          _dart_Wallets_resetWalletPassword>();

  ffi.Pointer<CError> Wallets_renameWallet(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> newName,
    ffi.Pointer<ffi.Int8> walletId,
  ) {
    return _Wallets_renameWallet(
      ctx,
      newName,
      walletId,
    );
  }

  late final _Wallets_renameWallet_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_renameWallet>>(
          'Wallets_renameWallet');
  late final _dart_Wallets_renameWallet _Wallets_renameWallet =
      _Wallets_renameWallet_ptr.asFunction<_dart_Wallets_renameWallet>();

  /// 只有到CError为 Error::SUCCESS()时返值才有意义
  /// 返回值 hasAny: true表示至少有一个; Fail: false，没有
  ffi.Pointer<CError> Wallets_hasAny(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Uint32> hasAny,
  ) {
    return _Wallets_hasAny(
      ctx,
      hasAny,
    );
  }

  late final _Wallets_hasAny_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_hasAny>>('Wallets_hasAny');
  late final _dart_Wallets_hasAny _Wallets_hasAny =
      _Wallets_hasAny_ptr.asFunction<_dart_Wallets_hasAny>();

  ffi.Pointer<CError> Wallets_findById(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> walletId,
    ffi.Pointer<ffi.Pointer<CWallet>> wallet,
  ) {
    return _Wallets_findById(
      ctx,
      walletId,
      wallet,
    );
  }

  late final _Wallets_findById_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_findById>>('Wallets_findById');
  late final _dart_Wallets_findById _Wallets_findById =
      _Wallets_findById_ptr.asFunction<_dart_Wallets_findById>();

  /// 注：只加载了wallet的id name等直接的基本数据，子对象（如链）的数据没有加载
  ffi.Pointer<CError> Wallets_findWalletBaseByName(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<CArrayCWallet>> walletArray,
  ) {
    return _Wallets_findWalletBaseByName(
      ctx,
      name,
      walletArray,
    );
  }

  late final _Wallets_findWalletBaseByName_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_findWalletBaseByName>>(
          'Wallets_findWalletBaseByName');
  late final _dart_Wallets_findWalletBaseByName _Wallets_findWalletBaseByName =
      _Wallets_findWalletBaseByName_ptr.asFunction<
          _dart_Wallets_findWalletBaseByName>();

  /// 查询当前wallet 与 chain
  ffi.Pointer<CError> Wallets_currentWalletChain(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> walletId,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> chainType,
  ) {
    return _Wallets_currentWalletChain(
      ctx,
      walletId,
      chainType,
    );
  }

  late final _Wallets_currentWalletChain_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_currentWalletChain>>(
          'Wallets_currentWalletChain');
  late final _dart_Wallets_currentWalletChain _Wallets_currentWalletChain =
      _Wallets_currentWalletChain_ptr.asFunction<
          _dart_Wallets_currentWalletChain>();

  /// 保存当前wallet 与 chain
  ffi.Pointer<CError> Wallets_saveCurrentWalletChain(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> walletId,
    ffi.Pointer<ffi.Int8> chainType,
  ) {
    return _Wallets_saveCurrentWalletChain(
      ctx,
      walletId,
      chainType,
    );
  }

  late final _Wallets_saveCurrentWalletChain_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_saveCurrentWalletChain>>(
          'Wallets_saveCurrentWalletChain');
  late final _dart_Wallets_saveCurrentWalletChain
      _Wallets_saveCurrentWalletChain = _Wallets_saveCurrentWalletChain_ptr
          .asFunction<_dart_Wallets_saveCurrentWalletChain>();

  ffi.Pointer<ffi.Int8> Wallets_appPlatformType() {
    return _Wallets_appPlatformType();
  }

  late final _Wallets_appPlatformType_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_appPlatformType>>(
          'Wallets_appPlatformType');
  late final _dart_Wallets_appPlatformType _Wallets_appPlatformType =
      _Wallets_appPlatformType_ptr.asFunction<_dart_Wallets_appPlatformType>();

  ffi.Pointer<CError> Wallets_queryBalance(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<ffi.Int8> walletId,
    ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> tokenAddress,
  ) {
    return _Wallets_queryBalance(
      ctx,
      netType,
      walletId,
      tokenAddress,
    );
  }

  late final _Wallets_queryBalance_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_queryBalance>>(
          'Wallets_queryBalance');
  late final _dart_Wallets_queryBalance _Wallets_queryBalance =
      _Wallets_queryBalance_ptr.asFunction<_dart_Wallets_queryBalance>();

  ffi.Pointer<CError> Wallets_updateBalance(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CTokenAddress> tokenAddress,
  ) {
    return _Wallets_updateBalance(
      ctx,
      netType,
      tokenAddress,
    );
  }

  late final _Wallets_updateBalance_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_updateBalance>>(
          'Wallets_updateBalance');
  late final _dart_Wallets_updateBalance _Wallets_updateBalance =
      _Wallets_updateBalance_ptr.asFunction<_dart_Wallets_updateBalance>();

  ffi.Pointer<CError> Wallets_changeTokenShowState(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CWalletTokenStatus> tokenStatus,
  ) {
    return _Wallets_changeTokenShowState(
      ctx,
      netType,
      tokenStatus,
    );
  }

  late final _Wallets_changeTokenShowState_ptr =
      _lookup<ffi.NativeFunction<_c_Wallets_changeTokenShowState>>(
          'Wallets_changeTokenShowState');
  late final _dart_Wallets_changeTokenShowState _Wallets_changeTokenShowState =
      _Wallets_changeTokenShowState_ptr.asFunction<
          _dart_Wallets_changeTokenShowState>();

  ffi.Pointer<CError> ChainBtc_updateDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCBtcChainTokenDefault> defaultTokens,
  ) {
    return _ChainBtc_updateDefaultTokenList(
      ctx,
      defaultTokens,
    );
  }

  late final _ChainBtc_updateDefaultTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainBtc_updateDefaultTokenList>>(
          'ChainBtc_updateDefaultTokenList');
  late final _dart_ChainBtc_updateDefaultTokenList
      _ChainBtc_updateDefaultTokenList = _ChainBtc_updateDefaultTokenList_ptr
          .asFunction<_dart_ChainBtc_updateDefaultTokenList>();

  ffi.Pointer<CError> ChainBtc_updateAuthDigitList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCBtcChainTokenAuth> authTokens,
  ) {
    return _ChainBtc_updateAuthDigitList(
      ctx,
      authTokens,
    );
  }

  late final _ChainBtc_updateAuthDigitList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainBtc_updateAuthDigitList>>(
          'ChainBtc_updateAuthDigitList');
  late final _dart_ChainBtc_updateAuthDigitList _ChainBtc_updateAuthDigitList =
      _ChainBtc_updateAuthDigitList_ptr.asFunction<
          _dart_ChainBtc_updateAuthDigitList>();

  ffi.Pointer<CError> ChainBtc_getAuthTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    int startItem,
    int pageSize,
    ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>> tokens,
  ) {
    return _ChainBtc_getAuthTokenList(
      ctx,
      netType,
      startItem,
      pageSize,
      tokens,
    );
  }

  late final _ChainBtc_getAuthTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainBtc_getAuthTokenList>>(
          'ChainBtc_getAuthTokenList');
  late final _dart_ChainBtc_getAuthTokenList _ChainBtc_getAuthTokenList =
      _ChainBtc_getAuthTokenList_ptr.asFunction<
          _dart_ChainBtc_getAuthTokenList>();

  ffi.Pointer<CError> ChainBtc_getDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>> tokens,
  ) {
    return _ChainBtc_getDefaultTokenList(
      ctx,
      netType,
      tokens,
    );
  }

  late final _ChainBtc_getDefaultTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainBtc_getDefaultTokenList>>(
          'ChainBtc_getDefaultTokenList');
  late final _dart_ChainBtc_getDefaultTokenList _ChainBtc_getDefaultTokenList =
      _ChainBtc_getDefaultTokenList_ptr.asFunction<
          _dart_ChainBtc_getDefaultTokenList>();

  ffi.Pointer<CError> ChainEee_updateSyncRecord(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CAccountInfoSyncProg> syncRecord,
  ) {
    return _ChainEee_updateSyncRecord(
      ctx,
      netType,
      syncRecord,
    );
  }

  late final _ChainEee_updateSyncRecord_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_updateSyncRecord>>(
          'ChainEee_updateSyncRecord');
  late final _dart_ChainEee_updateSyncRecord _ChainEee_updateSyncRecord =
      _ChainEee_updateSyncRecord_ptr.asFunction<
          _dart_ChainEee_updateSyncRecord>();

  ffi.Pointer<CError> ChainEee_getSyncRecord(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<ffi.Int8> account,
    ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> syncRecord,
  ) {
    return _ChainEee_getSyncRecord(
      ctx,
      netType,
      account,
      syncRecord,
    );
  }

  late final _ChainEee_getSyncRecord_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_getSyncRecord>>(
          'ChainEee_getSyncRecord');
  late final _dart_ChainEee_getSyncRecord _ChainEee_getSyncRecord =
      _ChainEee_getSyncRecord_ptr.asFunction<_dart_ChainEee_getSyncRecord>();

  ffi.Pointer<CError> ChainEee_decodeAccountInfo(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CDecodeAccountInfoParameters> parameters,
    ffi.Pointer<ffi.Pointer<CAccountInfo>> accountInfo,
  ) {
    return _ChainEee_decodeAccountInfo(
      ctx,
      netType,
      parameters,
      accountInfo,
    );
  }

  late final _ChainEee_decodeAccountInfo_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_decodeAccountInfo>>(
          'ChainEee_decodeAccountInfo');
  late final _dart_ChainEee_decodeAccountInfo _ChainEee_decodeAccountInfo =
      _ChainEee_decodeAccountInfo_ptr.asFunction<
          _dart_ChainEee_decodeAccountInfo>();

  ffi.Pointer<CError> ChainEee_getStorageKey(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CStorageKeyParameters> parameters,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> key,
  ) {
    return _ChainEee_getStorageKey(
      ctx,
      netType,
      parameters,
      key,
    );
  }

  late final _ChainEee_getStorageKey_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_getStorageKey>>(
          'ChainEee_getStorageKey');
  late final _dart_ChainEee_getStorageKey _ChainEee_getStorageKey =
      _ChainEee_getStorageKey_ptr.asFunction<_dart_ChainEee_getStorageKey>();

  ffi.Pointer<CError> ChainEee_eeeTransfer(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CEeeTransferPayload> transferPayload,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
  ) {
    return _ChainEee_eeeTransfer(
      ctx,
      netType,
      transferPayload,
      signedResult,
    );
  }

  late final _ChainEee_eeeTransfer_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_eeeTransfer>>(
          'ChainEee_eeeTransfer');
  late final _dart_ChainEee_eeeTransfer _ChainEee_eeeTransfer =
      _ChainEee_eeeTransfer_ptr.asFunction<_dart_ChainEee_eeeTransfer>();

  ffi.Pointer<CError> ChainEee_tokenXTransfer(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CEeeTransferPayload> transferPayload,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
  ) {
    return _ChainEee_tokenXTransfer(
      ctx,
      netType,
      transferPayload,
      signedResult,
    );
  }

  late final _ChainEee_tokenXTransfer_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_tokenXTransfer>>(
          'ChainEee_tokenXTransfer');
  late final _dart_ChainEee_tokenXTransfer _ChainEee_tokenXTransfer =
      _ChainEee_tokenXTransfer_ptr.asFunction<_dart_ChainEee_tokenXTransfer>();

  ffi.Pointer<CError> ChainEee_txSubmittableSign(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CRawTxParam> rawTx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
  ) {
    return _ChainEee_txSubmittableSign(
      ctx,
      netType,
      rawTx,
      signedResult,
    );
  }

  late final _ChainEee_txSubmittableSign_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_txSubmittableSign>>(
          'ChainEee_txSubmittableSign');
  late final _dart_ChainEee_txSubmittableSign _ChainEee_txSubmittableSign =
      _ChainEee_txSubmittableSign_ptr.asFunction<
          _dart_ChainEee_txSubmittableSign>();

  ffi.Pointer<CError> ChainEee_txSign(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CRawTxParam> rawTx,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
  ) {
    return _ChainEee_txSign(
      ctx,
      netType,
      rawTx,
      signedResult,
    );
  }

  late final _ChainEee_txSign_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_txSign>>('ChainEee_txSign');
  late final _dart_ChainEee_txSign _ChainEee_txSign =
      _ChainEee_txSign_ptr.asFunction<_dart_ChainEee_txSign>();

  ffi.Pointer<CError> ChainEee_updateBasicInfo(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CSubChainBasicInfo> basicInfo,
  ) {
    return _ChainEee_updateBasicInfo(
      ctx,
      netType,
      basicInfo,
    );
  }

  late final _ChainEee_updateBasicInfo_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_updateBasicInfo>>(
          'ChainEee_updateBasicInfo');
  late final _dart_ChainEee_updateBasicInfo _ChainEee_updateBasicInfo =
      _ChainEee_updateBasicInfo_ptr.asFunction<
          _dart_ChainEee_updateBasicInfo>();

  ffi.Pointer<CError> ChainEee_getDefaultBasicInfo(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> basicInfo,
  ) {
    return _ChainEee_getDefaultBasicInfo(
      ctx,
      netType,
      basicInfo,
    );
  }

  late final _ChainEee_getDefaultBasicInfo_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_getDefaultBasicInfo>>(
          'ChainEee_getDefaultBasicInfo');
  late final _dart_ChainEee_getDefaultBasicInfo _ChainEee_getDefaultBasicInfo =
      _ChainEee_getDefaultBasicInfo_ptr.asFunction<
          _dart_ChainEee_getDefaultBasicInfo>();

  ffi.Pointer<CError> ChainEee_getBasicInfo(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CChainVersion> chainVersion,
    ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> basicInfo,
  ) {
    return _ChainEee_getBasicInfo(
      ctx,
      netType,
      chainVersion,
      basicInfo,
    );
  }

  late final _ChainEee_getBasicInfo_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_getBasicInfo>>(
          'ChainEee_getBasicInfo');
  late final _dart_ChainEee_getBasicInfo _ChainEee_getBasicInfo =
      _ChainEee_getBasicInfo_ptr.asFunction<_dart_ChainEee_getBasicInfo>();

  ffi.Pointer<CError> ChainEee_saveExtrinsicDetail(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CExtrinsicContext> extrinsicCtx,
  ) {
    return _ChainEee_saveExtrinsicDetail(
      ctx,
      netType,
      extrinsicCtx,
    );
  }

  late final _ChainEee_saveExtrinsicDetail_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_saveExtrinsicDetail>>(
          'ChainEee_saveExtrinsicDetail');
  late final _dart_ChainEee_saveExtrinsicDetail _ChainEee_saveExtrinsicDetail =
      _ChainEee_saveExtrinsicDetail_ptr.asFunction<
          _dart_ChainEee_saveExtrinsicDetail>();

  ffi.Pointer<CError> ChainEee_queryChainTxRecord(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<ffi.Int8> account,
    int startItem,
    int pageSize,
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> records,
  ) {
    return _ChainEee_queryChainTxRecord(
      ctx,
      netType,
      account,
      startItem,
      pageSize,
      records,
    );
  }

  late final _ChainEee_queryChainTxRecord_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_queryChainTxRecord>>(
          'ChainEee_queryChainTxRecord');
  late final _dart_ChainEee_queryChainTxRecord _ChainEee_queryChainTxRecord =
      _ChainEee_queryChainTxRecord_ptr.asFunction<
          _dart_ChainEee_queryChainTxRecord>();

  ffi.Pointer<CError> ChainEee_queryTokenxTxRecord(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<ffi.Int8> account,
    int startItem,
    int pageSize,
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> records,
  ) {
    return _ChainEee_queryTokenxTxRecord(
      ctx,
      netType,
      account,
      startItem,
      pageSize,
      records,
    );
  }

  late final _ChainEee_queryTokenxTxRecord_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_queryTokenxTxRecord>>(
          'ChainEee_queryTokenxTxRecord');
  late final _dart_ChainEee_queryTokenxTxRecord _ChainEee_queryTokenxTxRecord =
      _ChainEee_queryTokenxTxRecord_ptr.asFunction<
          _dart_ChainEee_queryTokenxTxRecord>();

  ffi.Pointer<CError> ChainEee_updateAuthDigitList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCEeeChainTokenAuth> authTokens,
  ) {
    return _ChainEee_updateAuthDigitList(
      ctx,
      authTokens,
    );
  }

  late final _ChainEee_updateAuthDigitList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_updateAuthDigitList>>(
          'ChainEee_updateAuthDigitList');
  late final _dart_ChainEee_updateAuthDigitList _ChainEee_updateAuthDigitList =
      _ChainEee_updateAuthDigitList_ptr.asFunction<
          _dart_ChainEee_updateAuthDigitList>();

  ffi.Pointer<CError> ChainEee_updateDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCEeeChainTokenDefault> defaultTokens,
  ) {
    return _ChainEee_updateDefaultTokenList(
      ctx,
      defaultTokens,
    );
  }

  late final _ChainEee_updateDefaultTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_updateDefaultTokenList>>(
          'ChainEee_updateDefaultTokenList');
  late final _dart_ChainEee_updateDefaultTokenList
      _ChainEee_updateDefaultTokenList = _ChainEee_updateDefaultTokenList_ptr
          .asFunction<_dart_ChainEee_updateDefaultTokenList>();

  ffi.Pointer<CError> ChainEee_getAuthTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    int startItem,
    int pageSize,
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>> tokens,
  ) {
    return _ChainEee_getAuthTokenList(
      ctx,
      netType,
      startItem,
      pageSize,
      tokens,
    );
  }

  late final _ChainEee_getAuthTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_getAuthTokenList>>(
          'ChainEee_getAuthTokenList');
  late final _dart_ChainEee_getAuthTokenList _ChainEee_getAuthTokenList =
      _ChainEee_getAuthTokenList_ptr.asFunction<
          _dart_ChainEee_getAuthTokenList>();

  ffi.Pointer<CError> ChainEee_getDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>> tokens,
  ) {
    return _ChainEee_getDefaultTokenList(
      ctx,
      netType,
      tokens,
    );
  }

  late final _ChainEee_getDefaultTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEee_getDefaultTokenList>>(
          'ChainEee_getDefaultTokenList');
  late final _dart_ChainEee_getDefaultTokenList _ChainEee_getDefaultTokenList =
      _ChainEee_getDefaultTokenList_ptr.asFunction<
          _dart_ChainEee_getDefaultTokenList>();

  ffi.Pointer<CError> ChainEth_decodeAdditionData(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> encodeData,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> additionData,
  ) {
    return _ChainEth_decodeAdditionData(
      ctx,
      encodeData,
      additionData,
    );
  }

  late final _ChainEth_decodeAdditionData_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEth_decodeAdditionData>>(
          'ChainEth_decodeAdditionData');
  late final _dart_ChainEth_decodeAdditionData _ChainEth_decodeAdditionData =
      _ChainEth_decodeAdditionData_ptr.asFunction<
          _dart_ChainEth_decodeAdditionData>();

  ffi.Pointer<CError> ChainEth_txSign(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CEthTransferPayload> txPayload,
    ffi.Pointer<ffi.Int8> password,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> signResult,
  ) {
    return _ChainEth_txSign(
      ctx,
      netType,
      txPayload,
      password,
      signResult,
    );
  }

  late final _ChainEth_txSign_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEth_txSign>>('ChainEth_txSign');
  late final _dart_ChainEth_txSign _ChainEth_txSign =
      _ChainEth_txSign_ptr.asFunction<_dart_ChainEth_txSign>();

  ffi.Pointer<CError> ChainEth_rawTxSign(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<CEthRawTxPayload> rawTxPayload,
    ffi.Pointer<ffi.Int8> password,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> signResult,
  ) {
    return _ChainEth_rawTxSign(
      ctx,
      netType,
      rawTxPayload,
      password,
      signResult,
    );
  }

  late final _ChainEth_rawTxSign_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEth_rawTxSign>>('ChainEth_rawTxSign');
  late final _dart_ChainEth_rawTxSign _ChainEth_rawTxSign =
      _ChainEth_rawTxSign_ptr.asFunction<_dart_ChainEth_rawTxSign>();

  ffi.Pointer<CError> ChainEth_updateAuthTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCEthChainTokenAuth> authTokens,
  ) {
    return _ChainEth_updateAuthTokenList(
      ctx,
      authTokens,
    );
  }

  late final _ChainEth_updateAuthTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEth_updateAuthTokenList>>(
          'ChainEth_updateAuthTokenList');
  late final _dart_ChainEth_updateAuthTokenList _ChainEth_updateAuthTokenList =
      _ChainEth_updateAuthTokenList_ptr.asFunction<
          _dart_ChainEth_updateAuthTokenList>();

  ffi.Pointer<CError> ChainEth_getAuthTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    int startItem,
    int pageSize,
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> tokens,
  ) {
    return _ChainEth_getAuthTokenList(
      ctx,
      netType,
      startItem,
      pageSize,
      tokens,
    );
  }

  late final _ChainEth_getAuthTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEth_getAuthTokenList>>(
          'ChainEth_getAuthTokenList');
  late final _dart_ChainEth_getAuthTokenList _ChainEth_getAuthTokenList =
      _ChainEth_getAuthTokenList_ptr.asFunction<
          _dart_ChainEth_getAuthTokenList>();

  ffi.Pointer<CError> ChainEth_updateDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCEthChainTokenDefault> defaultTokens,
  ) {
    return _ChainEth_updateDefaultTokenList(
      ctx,
      defaultTokens,
    );
  }

  late final _ChainEth_updateDefaultTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEth_updateDefaultTokenList>>(
          'ChainEth_updateDefaultTokenList');
  late final _dart_ChainEth_updateDefaultTokenList
      _ChainEth_updateDefaultTokenList = _ChainEth_updateDefaultTokenList_ptr
          .asFunction<_dart_ChainEth_updateDefaultTokenList>();

  ffi.Pointer<CError> ChainEth_getDefaultTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>> tokens,
  ) {
    return _ChainEth_getDefaultTokenList(
      ctx,
      netType,
      tokens,
    );
  }

  late final _ChainEth_getDefaultTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEth_getDefaultTokenList>>(
          'ChainEth_getDefaultTokenList');
  late final _dart_ChainEth_getDefaultTokenList _ChainEth_getDefaultTokenList =
      _ChainEth_getDefaultTokenList_ptr.asFunction<
          _dart_ChainEth_getDefaultTokenList>();

  ffi.Pointer<CError> ChainEth_updateNonAuthTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<CArrayCEthChainTokenNonAuth> tokens,
  ) {
    return _ChainEth_updateNonAuthTokenList(
      ctx,
      tokens,
    );
  }

  late final _ChainEth_updateNonAuthTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEth_updateNonAuthTokenList>>(
          'ChainEth_updateNonAuthTokenList');
  late final _dart_ChainEth_updateNonAuthTokenList
      _ChainEth_updateNonAuthTokenList = _ChainEth_updateNonAuthTokenList_ptr
          .asFunction<_dart_ChainEth_updateNonAuthTokenList>();

  ffi.Pointer<CError> ChainEth_getNonAuthTokenList(
    ffi.Pointer<CContext> ctx,
    ffi.Pointer<ffi.Int8> netType,
    ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>> tokens,
  ) {
    return _ChainEth_getNonAuthTokenList(
      ctx,
      netType,
      tokens,
    );
  }

  late final _ChainEth_getNonAuthTokenList_ptr =
      _lookup<ffi.NativeFunction<_c_ChainEth_getNonAuthTokenList>>(
          'ChainEth_getNonAuthTokenList');
  late final _dart_ChainEth_getNonAuthTokenList _ChainEth_getNonAuthTokenList =
      _ChainEth_getNonAuthTokenList_ptr.asFunction<
          _dart_ChainEth_getNonAuthTokenList>();
}

class __fsid_t extends ffi.Opaque {}

class CContext extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> id;

  external ffi.Pointer<ffi.Int8> contextNote;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCContext extends ffi.Struct {
  external ffi.Pointer<CContext> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CError extends ffi.Struct {
  @ffi.Uint64()
  external int code;

  external ffi.Pointer<ffi.Int8> message;
}

class CAddress extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> id;

  external ffi.Pointer<ffi.Int8> walletId;

  external ffi.Pointer<ffi.Int8> chainType;

  external ffi.Pointer<ffi.Int8> address;

  external ffi.Pointer<ffi.Int8> publicKey;

  @ffi.Uint32()
  external int isWalletAddress;

  @ffi.Uint32()
  external int show_1;
}

class CChainShared extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> walletId;

  external ffi.Pointer<ffi.Int8> chainType;

  external ffi.Pointer<CAddress> walletAddress;
}

class CTokenShared extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> symbol;

  external ffi.Pointer<ffi.Int8> logoUrl;

  external ffi.Pointer<ffi.Int8> logoBytes;

  external ffi.Pointer<ffi.Int8> projectName;

  external ffi.Pointer<ffi.Int8> projectHome;

  external ffi.Pointer<ffi.Int8> projectNote;
}

class CEthChainTokenShared extends ffi.Struct {
  external ffi.Pointer<CTokenShared> tokenShared;

  external ffi.Pointer<ffi.Int8> tokenType;

  @ffi.Int64()
  external int gasLimit;

  external ffi.Pointer<ffi.Int8> gasPrice;

  @ffi.Int32()
  external int decimal;
}

class CEthChainToken extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> chainTokenSharedId;

  @ffi.Uint32()
  external int show_1;

  external ffi.Pointer<ffi.Int8> contractAddress;

  external ffi.Pointer<CEthChainTokenShared> ethChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCEthChainToken extends ffi.Struct {
  external ffi.Pointer<CEthChainToken> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CEthChain extends ffi.Struct {
  external ffi.Pointer<CChainShared> chainShared;

  external ffi.Pointer<CArrayCEthChainToken> tokens;
}

class CEeeChainTokenShared extends ffi.Struct {
  external ffi.Pointer<CTokenShared> tokenShared;

  external ffi.Pointer<ffi.Int8> tokenType;

  @ffi.Int64()
  external int gasLimit;

  external ffi.Pointer<ffi.Int8> gasPrice;

  @ffi.Int32()
  external int decimal;
}

class CEeeChainToken extends ffi.Struct {
  @ffi.Uint32()
  external int show_1;

  external ffi.Pointer<ffi.Int8> chainTokenSharedId;

  external ffi.Pointer<CEeeChainTokenShared> eeeChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCEeeChainToken extends ffi.Struct {
  external ffi.Pointer<CEeeChainToken> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CEeeChain extends ffi.Struct {
  external ffi.Pointer<CChainShared> chainShared;

  external ffi.Pointer<CArrayCEeeChainToken> tokens;
}

class CBtcChainTokenShared extends ffi.Struct {
  external ffi.Pointer<CTokenShared> tokenShared;

  external ffi.Pointer<ffi.Int8> tokenType;

  @ffi.Int64()
  external int gas;

  @ffi.Int32()
  external int decimal;
}

class CBtcChainToken extends ffi.Struct {
  @ffi.Uint32()
  external int show_1;

  external ffi.Pointer<ffi.Int8> chainTokenSharedId;

  external ffi.Pointer<CBtcChainTokenShared> btcChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCBtcChainToken extends ffi.Struct {
  external ffi.Pointer<CBtcChainToken> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CBtcChain extends ffi.Struct {
  external ffi.Pointer<CChainShared> chainShared;

  external ffi.Pointer<CArrayCBtcChainToken> tokens;
}

class CWallet extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> id;

  external ffi.Pointer<ffi.Int8> nextId;

  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> walletType;

  external ffi.Pointer<CEthChain> ethChain;

  external ffi.Pointer<CEeeChain> eeeChain;

  external ffi.Pointer<CBtcChain> btcChain;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCWallet extends ffi.Struct {
  external ffi.Pointer<CWallet> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CDbName extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> path;

  external ffi.Pointer<ffi.Int8> prefix;

  external ffi.Pointer<ffi.Int8> cashboxWallets;

  external ffi.Pointer<ffi.Int8> cashboxMnemonic;

  external ffi.Pointer<ffi.Int8> walletMainnet;

  external ffi.Pointer<ffi.Int8> walletPrivate;

  external ffi.Pointer<ffi.Int8> walletTestnet;

  external ffi.Pointer<ffi.Int8> walletTestnetPrivate;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayI64 extends ffi.Struct {
  external ffi.Pointer<ffi.Int64> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CAccountInfoSyncProg extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> account;

  external ffi.Pointer<ffi.Int8> blockNo;

  external ffi.Pointer<ffi.Int8> blockHash;
}

class CAccountInfo extends ffi.Struct {
  @ffi.Uint32()
  external int nonce;

  @ffi.Uint32()
  external int refCount;

  external ffi.Pointer<ffi.Int8> freeBalance;

  external ffi.Pointer<ffi.Int8> reserved;

  external ffi.Pointer<ffi.Int8> miscFrozen;

  external ffi.Pointer<ffi.Int8> feeFrozen;
}

class CSubChainBasicInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> genesisHash;

  external ffi.Pointer<ffi.Int8> metadata;

  @ffi.Int32()
  external int runtimeVersion;

  @ffi.Int32()
  external int txVersion;

  @ffi.Int32()
  external int ss58FormatPrefix;

  @ffi.Int32()
  external int tokenDecimals;

  external ffi.Pointer<ffi.Int8> tokenSymbol;

  @ffi.Uint32()
  external int isDefault;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCChar extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int8>> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CChainVersion extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> genesisHash;

  @ffi.Int32()
  external int runtimeVersion;

  @ffi.Int32()
  external int txVersion;
}

class CExtrinsicContext extends ffi.Struct {
  external ffi.Pointer<CChainVersion> chainVersion;

  external ffi.Pointer<ffi.Int8> account;

  external ffi.Pointer<ffi.Int8> blockHash;

  external ffi.Pointer<ffi.Int8> blockNumber;

  external ffi.Pointer<ffi.Int8> event;

  external ffi.Pointer<CArrayCChar> extrinsics;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCExtrinsicContext extends ffi.Struct {
  external ffi.Pointer<CExtrinsicContext> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CTokenAddress extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> walletId;

  external ffi.Pointer<ffi.Int8> chainType;

  external ffi.Pointer<ffi.Int8> tokenId;

  external ffi.Pointer<ffi.Int8> addressId;

  external ffi.Pointer<ffi.Int8> balance;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCTokenAddress extends ffi.Struct {
  external ffi.Pointer<CTokenAddress> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CEthChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> chainTokenSharedId;

  external ffi.Pointer<ffi.Int8> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<ffi.Int8> contractAddress;

  external ffi.Pointer<CEthChainTokenShared> ethChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCEthChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<CEthChainTokenAuth> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CEthChainTokenNonAuth extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> chainTokenSharedId;

  external ffi.Pointer<ffi.Int8> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<ffi.Int8> contractAddress;

  external ffi.Pointer<CEthChainTokenShared> ethChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCEthChainTokenNonAuth extends ffi.Struct {
  external ffi.Pointer<CEthChainTokenNonAuth> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CEthChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> chainTokenSharedId;

  external ffi.Pointer<ffi.Int8> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<ffi.Int8> contractAddress;

  external ffi.Pointer<CEthChainTokenShared> ethChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCEthChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<CEthChainTokenDefault> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CEeeChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> chainTokenSharedId;

  external ffi.Pointer<ffi.Int8> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<CEeeChainTokenShared> eeeChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCEeeChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<CEeeChainTokenDefault> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CBtcChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> chainTokenSharedId;

  external ffi.Pointer<ffi.Int8> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<CBtcChainTokenShared> btcChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCBtcChainTokenDefault extends ffi.Struct {
  external ffi.Pointer<CBtcChainTokenDefault> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CEeeChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> chainTokenSharedId;

  external ffi.Pointer<ffi.Int8> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<CEeeChainTokenShared> eeeChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCEeeChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<CEeeChainTokenAuth> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CBtcChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> chainTokenSharedId;

  external ffi.Pointer<ffi.Int8> netType;

  @ffi.Int64()
  external int position;

  external ffi.Pointer<CBtcChainTokenShared> btcChainTokenShared;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCBtcChainTokenAuth extends ffi.Struct {
  external ffi.Pointer<CBtcChainTokenAuth> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CEeeChainTx extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> txHash;

  external ffi.Pointer<ffi.Int8> blockHash;

  external ffi.Pointer<ffi.Int8> blockNumber;

  external ffi.Pointer<ffi.Int8> signer;

  external ffi.Pointer<ffi.Int8> walletAccount;

  external ffi.Pointer<ffi.Int8> fromAddress;

  external ffi.Pointer<ffi.Int8> toAddress;

  external ffi.Pointer<ffi.Int8> value;

  external ffi.Pointer<ffi.Int8> extension_1;

  @ffi.Uint32()
  external int status;

  @ffi.Int64()
  external int txTimestamp;

  external ffi.Pointer<ffi.Int8> txBytes;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCEeeChainTx extends ffi.Struct {
  external ffi.Pointer<CEeeChainTx> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class CWalletTokenStatus extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> walletId;

  external ffi.Pointer<ffi.Int8> chainType;

  external ffi.Pointer<ffi.Int8> tokenId;

  @ffi.Uint32()
  external int isShow;
}

class CInitParameters extends ffi.Struct {
  external ffi.Pointer<CDbName> dbName;

  @ffi.Uint32()
  external int isMemoryDb;

  external ffi.Pointer<ffi.Int8> contextNote;
}

class CCreateWalletParameters extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> password;

  external ffi.Pointer<ffi.Int8> mnemonic;

  external ffi.Pointer<ffi.Int8> walletType;
}

class CDecodeAccountInfoParameters extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> encodeData;

  external ffi.Pointer<CChainVersion> chainVersion;
}

class CStorageKeyParameters extends ffi.Struct {
  external ffi.Pointer<CChainVersion> chainVersion;

  external ffi.Pointer<ffi.Int8> module;

  external ffi.Pointer<ffi.Int8> storageItem;

  external ffi.Pointer<ffi.Int8> account;
}

class CEeeTransferPayload extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> fromAccount;

  external ffi.Pointer<ffi.Int8> toAccount;

  external ffi.Pointer<ffi.Int8> value;

  @ffi.Uint32()
  external int index;

  external ffi.Pointer<CChainVersion> chainVersion;

  external ffi.Pointer<ffi.Int8> extData;

  external ffi.Pointer<ffi.Int8> password;
}

class CRawTxParam extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> rawTx;

  external ffi.Pointer<ffi.Int8> walletId;

  external ffi.Pointer<ffi.Int8> password;
}

class CEthTransferPayload extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> fromAddress;

  external ffi.Pointer<ffi.Int8> toAddress;

  external ffi.Pointer<ffi.Int8> contractAddress;

  external ffi.Pointer<ffi.Int8> value;

  external ffi.Pointer<ffi.Int8> nonce;

  external ffi.Pointer<ffi.Int8> gasPrice;

  external ffi.Pointer<ffi.Int8> gasLimit;

  @ffi.Uint32()
  external int decimal;

  external ffi.Pointer<ffi.Int8> extData;
}

class CEthRawTxPayload extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> fromAddress;

  external ffi.Pointer<ffi.Int8> rawTx;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LONG_DOUBLE_USES_FLOAT128 = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

typedef _c_CContext_dAlloc = ffi.Pointer<ffi.Pointer<CContext>> Function();

typedef _dart_CContext_dAlloc = ffi.Pointer<ffi.Pointer<CContext>> Function();

typedef _c_CContext_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CContext>> dPtr,
);

typedef _dart_CContext_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CContext>> dPtr,
);

typedef _c_CArrayCContext_dAlloc = ffi.Pointer<ffi.Pointer<CArrayCContext>>
    Function();

typedef _dart_CArrayCContext_dAlloc = ffi.Pointer<ffi.Pointer<CArrayCContext>>
    Function();

typedef _c_CArrayCContext_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCContext>> dPtr,
);

typedef _dart_CArrayCContext_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCContext>> dPtr,
);

typedef _c_CStr_free = ffi.Void Function(
  ffi.Pointer<ffi.Int8> dcs,
);

typedef _dart_CStr_free = void Function(
  ffi.Pointer<ffi.Int8> dcs,
);

typedef _c_CStr_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> dcs,
);

typedef _dart_CStr_dFree = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> dcs,
);

typedef _c_CStr_dAlloc = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _dart_CStr_dAlloc = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function();

typedef _c_CBool_free = ffi.Void Function(
  ffi.Pointer<ffi.Uint32> dcs,
);

typedef _dart_CBool_free = void Function(
  ffi.Pointer<ffi.Uint32> dcs,
);

typedef _c_CBool_alloc = ffi.Pointer<ffi.Uint32> Function();

typedef _dart_CBool_alloc = ffi.Pointer<ffi.Uint32> Function();

typedef _c_CError_free = ffi.Void Function(
  ffi.Pointer<CError> error,
);

typedef _dart_CError_free = void Function(
  ffi.Pointer<CError> error,
);

typedef _c_CWallet_dAlloc = ffi.Pointer<ffi.Pointer<CWallet>> Function();

typedef _dart_CWallet_dAlloc = ffi.Pointer<ffi.Pointer<CWallet>> Function();

typedef _c_CWallet_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CWallet>> dPtr,
);

typedef _dart_CWallet_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CWallet>> dPtr,
);

typedef _c_CArrayCWallet_dAlloc = ffi.Pointer<ffi.Pointer<CArrayCWallet>>
    Function();

typedef _dart_CArrayCWallet_dAlloc = ffi.Pointer<ffi.Pointer<CArrayCWallet>>
    Function();

typedef _c_CArrayCWallet_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCWallet>> dPtr,
);

typedef _dart_CArrayCWallet_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCWallet>> dPtr,
);

typedef _c_CDbName_dAlloc = ffi.Pointer<ffi.Pointer<CDbName>> Function();

typedef _dart_CDbName_dAlloc = ffi.Pointer<ffi.Pointer<CDbName>> Function();

typedef _c_CDbName_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CDbName>> dPtr,
);

typedef _dart_CDbName_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CDbName>> dPtr,
);

typedef _c_CArrayInt64_dAlloc = ffi.Pointer<ffi.Pointer<CArrayI64>> Function();

typedef _dart_CArrayInt64_dAlloc = ffi.Pointer<ffi.Pointer<CArrayI64>>
    Function();

typedef _c_CArrayInt64_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayI64>> dPtr,
);

typedef _dart_CArrayInt64_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayI64>> dPtr,
);

typedef _c_CAccountInfoSyncProg_dAlloc
    = ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> Function();

typedef _dart_CAccountInfoSyncProg_dAlloc
    = ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> Function();

typedef _c_CAccountInfoSyncProg_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> dPtr,
);

typedef _dart_CAccountInfoSyncProg_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> dPtr,
);

typedef _c_CAccountInfo_dAlloc = ffi.Pointer<ffi.Pointer<CAccountInfo>>
    Function();

typedef _dart_CAccountInfo_dAlloc = ffi.Pointer<ffi.Pointer<CAccountInfo>>
    Function();

typedef _c_CAccountInfo_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CAccountInfo>> dPtr,
);

typedef _dart_CAccountInfo_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CAccountInfo>> dPtr,
);

typedef _c_CSubChainBasicInfo_dAlloc
    = ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> Function();

typedef _dart_CSubChainBasicInfo_dAlloc
    = ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> Function();

typedef _c_CSubChainBasicInfo_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> dPtr,
);

typedef _dart_CSubChainBasicInfo_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> dPtr,
);

typedef _c_CArrayCChar_dAlloc = ffi.Pointer<ffi.Pointer<CArrayCChar>>
    Function();

typedef _dart_CArrayCChar_dAlloc = ffi.Pointer<ffi.Pointer<CArrayCChar>>
    Function();

typedef _c_CArrayCChar_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCChar>> dPtr,
);

typedef _dart_CArrayCChar_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCChar>> dPtr,
);

typedef _c_CExtrinsicContext_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>> Function();

typedef _dart_CExtrinsicContext_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>> Function();

typedef _c_CExtrinsicContext_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>> dPtr,
);

typedef _dart_CExtrinsicContext_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCExtrinsicContext>> dPtr,
);

typedef _c_CArrayCTokenAddress_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> Function();

typedef _dart_CArrayCTokenAddress_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> Function();

typedef _c_CArrayCTokenAddress_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> dPtr,
);

typedef _dart_CArrayCTokenAddress_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> dPtr,
);

typedef _c_CArrayCEthChainTokenAuth_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> Function();

typedef _dart_CArrayCEthChainTokenAuth_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> Function();

typedef _c_CArrayCEthChainTokenAuth_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> dPtr,
);

typedef _dart_CArrayCEthChainTokenAuth_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> dPtr,
);

typedef _c_CArrayCEthChainTokenNonAuth_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>> Function();

typedef _dart_CArrayCEthChainTokenNonAuth_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>> Function();

typedef _c_CArrayCEthChainTokenNonAuth_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>> dPtr,
);

typedef _dart_CArrayCEthChainTokenNonAuth_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>> dPtr,
);

typedef _c_CArrayCEthChainTokenDefault_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>> Function();

typedef _dart_CArrayCEthChainTokenDefault_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>> Function();

typedef _c_CArrayCEthChainTokenDefault_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>> dPtr,
);

typedef _dart_CArrayCEthChainTokenDefault_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>> dPtr,
);

typedef _c_CArrayCEeeChainTokenDefault_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>> Function();

typedef _dart_CArrayCEeeChainTokenDefault_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>> Function();

typedef _c_CArrayCEeeChainTokenDefault_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>> dPtr,
);

typedef _dart_CArrayCEeeChainTokenDefault_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>> dPtr,
);

typedef _c_CArrayCBtcChainTokenDefault_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>> Function();

typedef _dart_CArrayCBtcChainTokenDefault_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>> Function();

typedef _c_CArrayCBtcChainTokenDefault_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>> dPtr,
);

typedef _dart_CArrayCBtcChainTokenDefault_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>> dPtr,
);

typedef _c_CArrayCEeeChainTokenAuth_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>> Function();

typedef _dart_CArrayCEeeChainTokenAuth_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>> Function();

typedef _c_CArrayCEeeChainTokenAuth_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>> dPtr,
);

typedef _dart_CArrayCEeeChainTokenAuth_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>> dPtr,
);

typedef _c_CArrayCBtcChainTokenAuth_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>> Function();

typedef _dart_CArrayCBtcChainTokenAuth_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>> Function();

typedef _c_CArrayCBtcChainTokenAuth_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>> dPtr,
);

typedef _dart_CArrayCBtcChainTokenAuth_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>> dPtr,
);

typedef _c_CArrayCEeeChainTx_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> Function();

typedef _dart_CArrayCEeeChainTx_dAlloc
    = ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> Function();

typedef _c_CArrayCEeeChainTx_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> dPtr,
);

typedef _dart_CArrayCEeeChainTx_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> dPtr,
);

typedef _c_CWalletTokenStatus_dAlloc
    = ffi.Pointer<ffi.Pointer<CWalletTokenStatus>> Function();

typedef _dart_CWalletTokenStatus_dAlloc
    = ffi.Pointer<ffi.Pointer<CWalletTokenStatus>> Function();

typedef _c_CWalletTokenStatus_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<CWalletTokenStatus>> dPtr,
);

typedef _dart_CWalletTokenStatus_dFree = void Function(
  ffi.Pointer<ffi.Pointer<CWalletTokenStatus>> dPtr,
);

typedef _c_Wallets_dbName = ffi.Pointer<CError> Function(
  ffi.Pointer<CDbName> name,
  ffi.Pointer<ffi.Pointer<CDbName>> outName,
);

typedef _dart_Wallets_dbName = ffi.Pointer<CError> Function(
  ffi.Pointer<CDbName> name,
  ffi.Pointer<ffi.Pointer<CDbName>> outName,
);

typedef _c_Wallets_init = ffi.Pointer<CError> Function(
  ffi.Pointer<CInitParameters> parameter,
  ffi.Pointer<ffi.Pointer<CContext>> context,
);

typedef _dart_Wallets_init = ffi.Pointer<CError> Function(
  ffi.Pointer<CInitParameters> parameter,
  ffi.Pointer<ffi.Pointer<CContext>> context,
);

typedef _c_Wallets_uninit = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
);

typedef _dart_Wallets_uninit = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
);

typedef _c_Wallets_Contexts = ffi.Pointer<CError> Function(
  ffi.Pointer<ffi.Pointer<CArrayCContext>> contexts,
);

typedef _dart_Wallets_Contexts = ffi.Pointer<CError> Function(
  ffi.Pointer<ffi.Pointer<CArrayCContext>> contexts,
);

typedef _c_Wallets_lastContext = ffi.Pointer<CError> Function(
  ffi.Pointer<ffi.Pointer<CContext>> context,
);

typedef _dart_Wallets_lastContext = ffi.Pointer<CError> Function(
  ffi.Pointer<ffi.Pointer<CContext>> context,
);

typedef _c_Wallets_firstContext = ffi.Pointer<CError> Function(
  ffi.Pointer<ffi.Pointer<CContext>> context,
);

typedef _dart_Wallets_firstContext = ffi.Pointer<CError> Function(
  ffi.Pointer<ffi.Pointer<CContext>> context,
);

typedef _c_Wallets_lockRead = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
);

typedef _dart_Wallets_lockRead = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
);

typedef _c_Wallets_unlockRead = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
);

typedef _dart_Wallets_unlockRead = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
);

typedef _c_Wallets_lockWrite = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
);

typedef _dart_Wallets_lockWrite = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
);

typedef _c_Wallets_unlockWrite = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
);

typedef _dart_Wallets_unlockWrite = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
);

typedef _c_Wallets_all = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Pointer<CArrayCWallet>> arrayWallet,
);

typedef _dart_Wallets_all = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Pointer<CArrayCWallet>> arrayWallet,
);

typedef _c_Wallets_generateMnemonic = ffi.Pointer<CError> Function(
  ffi.Uint32 mnemonic_num,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> mnemonic,
);

typedef _dart_Wallets_generateMnemonic = ffi.Pointer<CError> Function(
  int mnemonic_num,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> mnemonic,
);

typedef _c_Wallets_createWallet = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CCreateWalletParameters> parameters,
  ffi.Pointer<ffi.Pointer<CWallet>> wallet,
);

typedef _dart_Wallets_createWallet = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CCreateWalletParameters> parameters,
  ffi.Pointer<ffi.Pointer<CWallet>> wallet,
);

typedef _c_Wallets_removeWallet = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_Wallets_removeWallet = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_Wallets_exportWallet = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> mnemonic,
);

typedef _dart_Wallets_exportWallet = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> mnemonic,
);

typedef _c_Wallets_resetWalletPassword = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Int8> oldPsd,
  ffi.Pointer<ffi.Int8> newPsd,
);

typedef _dart_Wallets_resetWalletPassword = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Int8> oldPsd,
  ffi.Pointer<ffi.Int8> newPsd,
);

typedef _c_Wallets_renameWallet = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> newName,
  ffi.Pointer<ffi.Int8> walletId,
);

typedef _dart_Wallets_renameWallet = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> newName,
  ffi.Pointer<ffi.Int8> walletId,
);

typedef _c_Wallets_hasAny = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Uint32> hasAny,
);

typedef _dart_Wallets_hasAny = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Uint32> hasAny,
);

typedef _c_Wallets_findById = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Pointer<CWallet>> wallet,
);

typedef _dart_Wallets_findById = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Pointer<CWallet>> wallet,
);

typedef _c_Wallets_findWalletBaseByName = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<CArrayCWallet>> walletArray,
);

typedef _dart_Wallets_findWalletBaseByName = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<CArrayCWallet>> walletArray,
);

typedef _c_Wallets_currentWalletChain = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> walletId,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> chainType,
);

typedef _dart_Wallets_currentWalletChain = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> walletId,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> chainType,
);

typedef _c_Wallets_saveCurrentWalletChain = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Int8> chainType,
);

typedef _dart_Wallets_saveCurrentWalletChain = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Int8> chainType,
);

typedef _c_Wallets_appPlatformType = ffi.Pointer<ffi.Int8> Function();

typedef _dart_Wallets_appPlatformType = ffi.Pointer<ffi.Int8> Function();

typedef _c_Wallets_queryBalance = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> tokenAddress,
);

typedef _dart_Wallets_queryBalance = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Int8> walletId,
  ffi.Pointer<ffi.Pointer<CArrayCTokenAddress>> tokenAddress,
);

typedef _c_Wallets_updateBalance = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CTokenAddress> tokenAddress,
);

typedef _dart_Wallets_updateBalance = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CTokenAddress> tokenAddress,
);

typedef _c_Wallets_changeTokenShowState = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CWalletTokenStatus> tokenStatus,
);

typedef _dart_Wallets_changeTokenShowState = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CWalletTokenStatus> tokenStatus,
);

typedef _c_ChainBtc_updateDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCBtcChainTokenDefault> defaultTokens,
);

typedef _dart_ChainBtc_updateDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCBtcChainTokenDefault> defaultTokens,
);

typedef _c_ChainBtc_updateAuthDigitList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCBtcChainTokenAuth> authTokens,
);

typedef _dart_ChainBtc_updateAuthDigitList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCBtcChainTokenAuth> authTokens,
);

typedef _c_ChainBtc_getAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Uint32 startItem,
  ffi.Uint32 pageSize,
  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>> tokens,
);

typedef _dart_ChainBtc_getAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  int startItem,
  int pageSize,
  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenAuth>> tokens,
);

typedef _c_ChainBtc_getDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>> tokens,
);

typedef _dart_ChainBtc_getDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Pointer<CArrayCBtcChainTokenDefault>> tokens,
);

typedef _c_ChainEee_updateSyncRecord = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CAccountInfoSyncProg> syncRecord,
);

typedef _dart_ChainEee_updateSyncRecord = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CAccountInfoSyncProg> syncRecord,
);

typedef _c_ChainEee_getSyncRecord = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Int8> account,
  ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> syncRecord,
);

typedef _dart_ChainEee_getSyncRecord = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Int8> account,
  ffi.Pointer<ffi.Pointer<CAccountInfoSyncProg>> syncRecord,
);

typedef _c_ChainEee_decodeAccountInfo = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CDecodeAccountInfoParameters> parameters,
  ffi.Pointer<ffi.Pointer<CAccountInfo>> accountInfo,
);

typedef _dart_ChainEee_decodeAccountInfo = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CDecodeAccountInfoParameters> parameters,
  ffi.Pointer<ffi.Pointer<CAccountInfo>> accountInfo,
);

typedef _c_ChainEee_getStorageKey = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CStorageKeyParameters> parameters,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> key,
);

typedef _dart_ChainEee_getStorageKey = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CStorageKeyParameters> parameters,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> key,
);

typedef _c_ChainEee_eeeTransfer = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CEeeTransferPayload> transferPayload,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
);

typedef _dart_ChainEee_eeeTransfer = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CEeeTransferPayload> transferPayload,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
);

typedef _c_ChainEee_tokenXTransfer = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CEeeTransferPayload> transferPayload,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
);

typedef _dart_ChainEee_tokenXTransfer = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CEeeTransferPayload> transferPayload,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
);

typedef _c_ChainEee_txSubmittableSign = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CRawTxParam> rawTx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
);

typedef _dart_ChainEee_txSubmittableSign = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CRawTxParam> rawTx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
);

typedef _c_ChainEee_txSign = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CRawTxParam> rawTx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
);

typedef _dart_ChainEee_txSign = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CRawTxParam> rawTx,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signedResult,
);

typedef _c_ChainEee_updateBasicInfo = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CSubChainBasicInfo> basicInfo,
);

typedef _dart_ChainEee_updateBasicInfo = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CSubChainBasicInfo> basicInfo,
);

typedef _c_ChainEee_getDefaultBasicInfo = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> basicInfo,
);

typedef _dart_ChainEee_getDefaultBasicInfo = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> basicInfo,
);

typedef _c_ChainEee_getBasicInfo = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CChainVersion> chainVersion,
  ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> basicInfo,
);

typedef _dart_ChainEee_getBasicInfo = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CChainVersion> chainVersion,
  ffi.Pointer<ffi.Pointer<CSubChainBasicInfo>> basicInfo,
);

typedef _c_ChainEee_saveExtrinsicDetail = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CExtrinsicContext> extrinsicCtx,
);

typedef _dart_ChainEee_saveExtrinsicDetail = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CExtrinsicContext> extrinsicCtx,
);

typedef _c_ChainEee_queryChainTxRecord = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Int8> account,
  ffi.Uint32 startItem,
  ffi.Uint32 pageSize,
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> records,
);

typedef _dart_ChainEee_queryChainTxRecord = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Int8> account,
  int startItem,
  int pageSize,
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> records,
);

typedef _c_ChainEee_queryTokenxTxRecord = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Int8> account,
  ffi.Uint32 startItem,
  ffi.Uint32 pageSize,
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> records,
);

typedef _dart_ChainEee_queryTokenxTxRecord = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Int8> account,
  int startItem,
  int pageSize,
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTx>> records,
);

typedef _c_ChainEee_updateAuthDigitList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCEeeChainTokenAuth> authTokens,
);

typedef _dart_ChainEee_updateAuthDigitList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCEeeChainTokenAuth> authTokens,
);

typedef _c_ChainEee_updateDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCEeeChainTokenDefault> defaultTokens,
);

typedef _dart_ChainEee_updateDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCEeeChainTokenDefault> defaultTokens,
);

typedef _c_ChainEee_getAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Uint32 startItem,
  ffi.Uint32 pageSize,
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>> tokens,
);

typedef _dart_ChainEee_getAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  int startItem,
  int pageSize,
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenAuth>> tokens,
);

typedef _c_ChainEee_getDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>> tokens,
);

typedef _dart_ChainEee_getDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Pointer<CArrayCEeeChainTokenDefault>> tokens,
);

typedef _c_ChainEth_decodeAdditionData = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> encodeData,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> additionData,
);

typedef _dart_ChainEth_decodeAdditionData = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> encodeData,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> additionData,
);

typedef _c_ChainEth_txSign = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CEthTransferPayload> txPayload,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signResult,
);

typedef _dart_ChainEth_txSign = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CEthTransferPayload> txPayload,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signResult,
);

typedef _c_ChainEth_rawTxSign = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CEthRawTxPayload> rawTxPayload,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signResult,
);

typedef _dart_ChainEth_rawTxSign = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<CEthRawTxPayload> rawTxPayload,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> signResult,
);

typedef _c_ChainEth_updateAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCEthChainTokenAuth> authTokens,
);

typedef _dart_ChainEth_updateAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCEthChainTokenAuth> authTokens,
);

typedef _c_ChainEth_getAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Uint32 startItem,
  ffi.Uint32 pageSize,
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> tokens,
);

typedef _dart_ChainEth_getAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  int startItem,
  int pageSize,
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenAuth>> tokens,
);

typedef _c_ChainEth_updateDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCEthChainTokenDefault> defaultTokens,
);

typedef _dart_ChainEth_updateDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCEthChainTokenDefault> defaultTokens,
);

typedef _c_ChainEth_getDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>> tokens,
);

typedef _dart_ChainEth_getDefaultTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenDefault>> tokens,
);

typedef _c_ChainEth_updateNonAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCEthChainTokenNonAuth> tokens,
);

typedef _dart_ChainEth_updateNonAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<CArrayCEthChainTokenNonAuth> tokens,
);

typedef _c_ChainEth_getNonAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>> tokens,
);

typedef _dart_ChainEth_getNonAuthTokenList = ffi.Pointer<CError> Function(
  ffi.Pointer<CContext> ctx,
  ffi.Pointer<ffi.Int8> netType,
  ffi.Pointer<ffi.Pointer<CArrayCEthChainTokenNonAuth>> tokens,
);
