// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class Cdl {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Cdl(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Cdl.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_start_ptr =
      _lookup<ffi.NativeFunction<_c___va_start>>('__va_start');
  late final _dart___va_start ___va_start =
      ___va_start_ptr.asFunction<_dart___va_start>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookie_ptr =
      _lookup<ffi.NativeFunction<_c___security_init_cookie>>(
          '__security_init_cookie');
  late final _dart___security_init_cookie ___security_init_cookie =
      ___security_init_cookie_ptr.asFunction<_dart___security_init_cookie>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookie_ptr =
      _lookup<ffi.NativeFunction<_c___security_check_cookie>>(
          '__security_check_cookie');
  late final _dart___security_check_cookie ___security_check_cookie =
      ___security_check_cookie_ptr.asFunction<_dart___security_check_cookie>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailure_ptr =
      _lookup<ffi.NativeFunction<_c___report_gsfailure>>('__report_gsfailure');
  late final _dart___report_gsfailure ___report_gsfailure =
      ___report_gsfailure_ptr.asFunction<_dart___report_gsfailure>();

  late final ffi.Pointer<ffi.Uint64> ___security_cookie =
      _lookup<ffi.Uint64>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  int add(
    int a,
    int b,
  ) {
    return _add(
      a,
      b,
    );
  }

  late final _add_ptr = _lookup<ffi.NativeFunction<_c_add>>('add');
  late final _dart_add _add = _add_ptr.asFunction<_dart_add>();

  int multi_i32(
    ffi.Pointer<ffi.Pointer<ffi.Int32>> v,
  ) {
    return _multi_i32(
      v,
    );
  }

  late final _multi_i32_ptr =
      _lookup<ffi.NativeFunction<_c_multi_i32>>('multi_i32');
  late final _dart_multi_i32 _multi_i32 =
      _multi_i32_ptr.asFunction<_dart_multi_i32>();

  ffi.Pointer<ffi.Int8> addStr(
    ffi.Pointer<ffi.Int8> cs,
  ) {
    return _addStr(
      cs,
    );
  }

  late final _addStr_ptr = _lookup<ffi.NativeFunction<_c_addStr>>('addStr');
  late final _dart_addStr _addStr = _addStr_ptr.asFunction<_dart_addStr>();

  void Str_free(
    ffi.Pointer<ffi.Int8> cs,
  ) {
    return _Str_free(
      cs,
    );
  }

  late final _Str_free_ptr =
      _lookup<ffi.NativeFunction<_c_Str_free>>('Str_free');
  late final _dart_Str_free _Str_free =
      _Str_free_ptr.asFunction<_dart_Str_free>();

  ffi.Pointer<Data> Data_new() {
    return _Data_new();
  }

  late final _Data_new_ptr =
      _lookup<ffi.NativeFunction<_c_Data_new>>('Data_new');
  late final _dart_Data_new _Data_new =
      _Data_new_ptr.asFunction<_dart_Data_new>();

  void Data_free(
    ffi.Pointer<Data> cd,
  ) {
    return _Data_free(
      cd,
    );
  }

  late final _Data_free_ptr =
      _lookup<ffi.NativeFunction<_c_Data_free>>('Data_free');
  late final _dart_Data_free _Data_free =
      _Data_free_ptr.asFunction<_dart_Data_free>();

  ffi.Pointer<Data> Data_use(
    ffi.Pointer<Data> cd,
  ) {
    return _Data_use(
      cd,
    );
  }

  late final _Data_use_ptr =
      _lookup<ffi.NativeFunction<_c_Data_use>>('Data_use');
  late final _dart_Data_use _Data_use =
      _Data_use_ptr.asFunction<_dart_Data_use>();

  Data Data_noPtr() {
    return _Data_noPtr();
  }

  late final _Data_noPtr_ptr =
      _lookup<ffi.NativeFunction<_c_Data_noPtr>>('Data_noPtr');
  late final _dart_Data_noPtr _Data_noPtr =
      _Data_noPtr_ptr.asFunction<_dart_Data_noPtr>();

  ffi.Pointer<ffi.Pointer<Sample>> Sample_dAlloc() {
    return _Sample_dAlloc();
  }

  late final _Sample_dAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_Sample_dAlloc>>('Sample_dAlloc');
  late final _dart_Sample_dAlloc _Sample_dAlloc =
      _Sample_dAlloc_ptr.asFunction<_dart_Sample_dAlloc>();

  void Sample_dFree(
    ffi.Pointer<ffi.Pointer<Sample>> ptr,
  ) {
    return _Sample_dFree(
      ptr,
    );
  }

  late final _Sample_dFree_ptr =
      _lookup<ffi.NativeFunction<_c_Sample_dFree>>('Sample_dFree');
  late final _dart_Sample_dFree _Sample_dFree =
      _Sample_dFree_ptr.asFunction<_dart_Sample_dFree>();

  void Sample_create(
    ffi.Pointer<ffi.Pointer<Sample>> ptr,
  ) {
    return _Sample_create(
      ptr,
    );
  }

  late final _Sample_create_ptr =
      _lookup<ffi.NativeFunction<_c_Sample_create>>('Sample_create');
  late final _dart_Sample_create _Sample_create =
      _Sample_create_ptr.asFunction<_dart_Sample_create>();
}

class Data extends ffi.Struct {
  @ffi.Int32()
  external int intType;

  external ffi.Pointer<ffi.Int8> charType;

  external ffi.Pointer<ffi.Int32> arrayInt;

  @ffi.Uint64()
  external int arrayIntLength;

  external ffi.Pointer<Data> arrayData;

  @ffi.Uint64()
  external int arrayDataLength;

  external ffi.Pointer<Data> pointData;
}

/// c的数组需要定义两个字段，所定义一个结构体进行统一管理
/// 注：c不支持范型，所以cbindgen工具会使用具体的类型来代替
class CArrayCChar extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int8>> ptr;

  @ffi.Uint64()
  external int len;

  @ffi.Uint64()
  external int cap;
}

class Sample extends ffi.Struct {
  @ffi.Uint32()
  external int len;

  external ffi.Pointer<ffi.Int8> name;

  external CArrayCChar list;
}

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int CFalse = 0;

const int CTrue = 1;

typedef _c___va_start = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart___va_start = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c___security_init_cookie = ffi.Void Function();

typedef _dart___security_init_cookie = void Function();

typedef _c___security_check_cookie = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___security_check_cookie = void Function(
  int _StackCookie,
);

typedef _c___report_gsfailure = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___report_gsfailure = void Function(
  int _StackCookie,
);

typedef _c_add = ffi.Int32 Function(
  ffi.Int32 a,
  ffi.Int32 b,
);

typedef _dart_add = int Function(
  int a,
  int b,
);

typedef _c_multi_i32 = ffi.Uint32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> v,
);

typedef _dart_multi_i32 = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> v,
);

typedef _c_addStr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> cs,
);

typedef _dart_addStr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> cs,
);

typedef _c_Str_free = ffi.Void Function(
  ffi.Pointer<ffi.Int8> cs,
);

typedef _dart_Str_free = void Function(
  ffi.Pointer<ffi.Int8> cs,
);

typedef _c_Data_new = ffi.Pointer<Data> Function();

typedef _dart_Data_new = ffi.Pointer<Data> Function();

typedef _c_Data_free = ffi.Void Function(
  ffi.Pointer<Data> cd,
);

typedef _dart_Data_free = void Function(
  ffi.Pointer<Data> cd,
);

typedef _c_Data_use = ffi.Pointer<Data> Function(
  ffi.Pointer<Data> cd,
);

typedef _dart_Data_use = ffi.Pointer<Data> Function(
  ffi.Pointer<Data> cd,
);

typedef _c_Data_noPtr = Data Function();

typedef _dart_Data_noPtr = Data Function();

typedef _c_Sample_dAlloc = ffi.Pointer<ffi.Pointer<Sample>> Function();

typedef _dart_Sample_dAlloc = ffi.Pointer<ffi.Pointer<Sample>> Function();

typedef _c_Sample_dFree = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<Sample>> ptr,
);

typedef _dart_Sample_dFree = void Function(
  ffi.Pointer<ffi.Pointer<Sample>> ptr,
);

typedef _c_Sample_create = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<Sample>> ptr,
);

typedef _dart_Sample_create = void Function(
  ffi.Pointer<ffi.Pointer<Sample>> ptr,
);
